#!/usr/bin/env node

import { promises as fs } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const rootDir = path.resolve(__dirname, '..');

async function collectShaders(dir, shaders = {}) {
  const entries = await fs.readdir(dir, { withFileTypes: true });
  
  for (const entry of entries) {
    const fullPath = path.join(dir, entry.name);
    
    if (entry.isDirectory()) {
      await collectShaders(fullPath, shaders);
    } else if (entry.name.endsWith('.wgsl')) {
      const content = await fs.readFile(fullPath, 'utf-8');
      const key = entry.name.replace('.wgsl', '_wgsl').replace(/-/g, '_');
      shaders[key] = content;
      console.log(`  Found shader: ${key}`);
    }
  }
  
  return shaders;
}

async function main() {
  console.log('Collecting WGSL shaders...');
  
  const shaderDirs = [
    path.join(rootDir, 'frontend/lib/webgpu/shaders'),
    path.join(rootDir, 'standalone-holo/shaders') // if it exists
  ];
  
  let allShaders = {};
  
  for (const dir of shaderDirs) {
    try {
      await fs.access(dir);
      console.log(`Scanning ${dir}...`);
      await collectShaders(dir, allShaders);
    } catch (err) {
      console.log(`Skipping ${dir} (not found)`);
    }
  }
  
  // Generate the bundle
  const outputPath = path.join(rootDir, 'frontend/lib/shaderSources.ts');
  
  let output = '// Auto-generated shader bundle\n';
  output += '// Generated by scripts/generate-shader-bundle.mjs\n\n';
  
  for (const [key, content] of Object.entries(allShaders)) {
    output += `export const ${key} = \`${content.replace(/`/g, '\\`')}\`;\n\n`;
  }
  
  output += '// Export as window global for easy access\n';
  output += 'if (typeof window !== "undefined") {\n';
  output += '  (window as any).shaderSources = {\n';
  for (const key of Object.keys(allShaders)) {
    output += `    ${key},\n`;
  }
  output += '  };\n';
  output += '}\n';
  
  await fs.writeFile(outputPath, output);
  console.log(`âœ“ Generated ${outputPath}`);
  console.log(`  Total shaders: ${Object.keys(allShaders).length}`);
}

main().catch(err => {
  console.error('Failed to generate shader bundle:', err);
  process.exit(1);
});