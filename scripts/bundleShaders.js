// Simple shader bundler that generates valid TypeScript
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const SHADER_DIR = path.resolve(__dirname, '../frontend/lib/webgpu/shaders');
const OUTPUT_FILE = path.resolve(__dirname, '../frontend/lib/webgpu/generated/shaderSources.ts');

// Ensure output directory exists
const outputDir = path.dirname(OUTPUT_FILE);
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
}

// Read all .wgsl files
const shaderFiles = fs.readdirSync(SHADER_DIR)
  .filter(file => file.endsWith('.wgsl'))
  .sort();

console.log(`Found ${shaderFiles.length} shader files in ${SHADER_DIR}`);

// Generate output
const timestamp = new Date().toISOString();
let output = `// Auto-generated by shader bundler
// Generated: ${timestamp}
// Valid shaders: ${shaderFiles.length}/${shaderFiles.length}

`;

const shaders = [];

// Process each shader
for (const file of shaderFiles) {
  const name = file.replace('.wgsl', '_wgsl').replace(/[^a-zA-Z0-9_]/g, '_');
  const filepath = path.join(SHADER_DIR, file);
  
  try {
    const content = fs.readFileSync(filepath, 'utf8');
    shaders.push({ name, content, valid: true });
    
    // Export as properly escaped string
    output += `export const ${name} = ${JSON.stringify(content)};\n\n`;
    console.log(`  ✅ ${file}`);
  } catch (err) {
    console.error(`  ❌ ${file}: ${err.message}`);
    output += `// Error reading ${file}: ${err.message}\n`;
    output += `export const ${name} = "";\n\n`;
    shaders.push({ name, content: '', valid: false });
  }
}

// Export shader map
const validShaders = shaders.filter(s => s.valid);
output += `// Shader map object
export const shaderSources = {
${validShaders.map(s => `  ${s.name}: ${s.name}`).join(',\n')}
};

// Export metadata
export const shaderMetadata = {
  generated: "${timestamp}",
  totalShaders: ${shaders.length},
  validShaders: ${validShaders.length},
  shaderDir: "${SHADER_DIR.replace(/\\/g, '\\\\')}",
  shaders: {
${shaders.map(s => `    "${s.name}": {
      valid: ${s.valid},
      size: ${s.content.length}
    }`).join(',\n')}
  }
};

// Type exports
export type ShaderName = keyof typeof shaderSources;
export type ShaderMap = typeof shaderSources;

// Helper function
export function getShader(name: ShaderName): string {
  const shader = shaderSources[name];
  if (!shader) {
    throw new Error(\`Shader "\${name}" not found in bundle\`);
  }
  return shader;
}

export default shaderSources;
`;

// Write output
fs.writeFileSync(OUTPUT_FILE, output);

console.log(`\n✅ Generated ${OUTPUT_FILE}`);
console.log(`   Size: ${Math.round(output.length / 1024)} KB`);
console.log(`   Valid shaders: ${validShaders.length}/${shaders.length}`);
