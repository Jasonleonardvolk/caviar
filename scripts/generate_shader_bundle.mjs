/* frontend/scripts/generate_shader_bundle.mjs */
import { promises as fs } from 'node:fs';
import path from 'node:path';
import { globby } from 'globby';

const ROOT = process.cwd();
const SHADERS_DIR = path.join(ROOT, 'frontend', 'lib', 'webgpu', 'shaders');
const OUT_DIR = path.join(ROOT, 'frontend', 'lib', 'webgpu', 'generated');
const OUT_TS = path.join(OUT_DIR, 'shaderSources.ts');

function normalizeKey(p) {
  return p
    .replace(SHADERS_DIR + path.sep, '')
    .replace(/\\/g, '/');
}

(async function main() {
  const files = await globby([`${SHADERS_DIR}/**/*.wgsl`]);
  await fs.mkdir(OUT_DIR, { recursive: true });

  const imports = [];
  const entries = [];

  for (const f of files) {
    const rel = normalizeKey(f);
    const varName = rel
      .replace(/[^\w]/g, '_')
      .replace(/_wgsl$/, '');
    imports.push(`import ${varName} from ${JSON.stringify(path.relative(path.dirname(OUT_TS), f) + '?raw')};`);
    entries.push(`  { path: ${JSON.stringify('shaders/' + rel)}, content: ${varName} }`);
  }

  const header = `// AUTO-GENERATED by generate_shader_bundle.mjs â€” DO NOT EDIT\n`;
  const body = `
${imports.join('\n')}

export type ShaderSource = { path: string; content: string };

export const SHADERS: ShaderSource[] = [
${entries.join(',\n')}
];
`;

  await fs.writeFile(OUT_TS, header + body, 'utf8');
  console.log(`Wrote ${OUT_TS} with ${files.length} shaders.`);
})();
