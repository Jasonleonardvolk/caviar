#!/usr/bin/env python3
\"\"\"\n\ud83d\ude80 SIMPLE TORI LAUNCHER - Just the basics, no hanging\nLaunches only the simple main.py server without multi-tenant complexity\n\"\"\"\n\nimport subprocess\nimport sys\nimport os\nimport time\nfrom pathlib import Path\nfrom datetime import datetime\n\ndef find_available_port(start_port=8002, max_attempts=10):\n    \"\"\"Find the first available port\"\"\"\n    import socket\n    \n    for i in range(max_attempts):\n        port = start_port + i\n        try:\n            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n                s.bind(('0.0.0.0', port))\n                print(f\"\u2705 Found available port: {port}\")\n                return port\n        except OSError:\n            print(f\"\u274c Port {port} is busy\")\n    \n    raise Exception(f\"\u274c No available ports found in range {start_port}-{start_port + max_attempts}\")\n\ndef main():\n    \"\"\"Launch simple TORI server\"\"\"\n    print(\"\\n\" + \"=\" * 60)\n    print(\"\ud83d\ude80 SIMPLE TORI LAUNCHER - No Hanging, Just Working\")\n    print(\"=\" * 60)\n    print(f\"\ud83d\udcc2 Working directory: {Path.cwd()}\")\n    print(f\"\u23f0 Started at: {datetime.now().strftime('%H:%M:%S')}\")\n    print(\"\ud83c\udfaf Features: Simple, fast, reliable ScholarSphere extraction\")\n    print(\"=\" * 60 + \"\\n\")\n    \n    script_dir = Path(__file__).parent\n    main_script = script_dir / \"main.py\"\n    \n    if not main_script.exists():\n        print(f\"\u274c main.py not found at: {main_script}\")\n        return 1\n    \n    try:\n        # Find available port\n        port = find_available_port()\n        \n        print(f\"\ud83c\udf10 Starting simple TORI server on port {port}...\")\n        print(f\"\ud83d\udcc4 Health check: http://localhost:{port}/health\")\n        print(f\"\ud83d\udcda API docs: http://localhost:{port}/docs\")\n        print(f\"\ud83d\udce4 Upload: http://localhost:{port}/upload\")\n        print(f\"\ud83e\udde0 Extract: http://localhost:{port}/extract\")\n        print(\"\\n\u23f3 Starting server...\\n\")\n        \n        # Change to script directory\n        os.chdir(script_dir)\n        \n        # Start the simple main.py directly with uvicorn\n        cmd = [\n            sys.executable, \n            \"-m\", \"uvicorn\",\n            \"main:app\",\n            \"--host\", \"0.0.0.0\",\n            \"--port\", str(port),\n            \"--log-level\", \"info\",\n            \"--no-access-log\"\n        ]\n        \n        print(f\"\ud83d\ude80 Command: {' '.join(cmd)}\")\n        print(\"=\" * 60)\n        \n        # Run uvicorn\n        result = subprocess.run(cmd)\n        return result.returncode\n        \n    except KeyboardInterrupt:\n        print(\"\\n\ud83d\udc4b Shutdown requested by user\")\n        return 0\n    except Exception as e:\n        print(f\"\u274c Launch failed: {e}\")\n        return 1\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n