#!/usr/bin/env python3\n\"\"\"Test Runner for TORI E2E Testing Suite\"\"\"\n\nimport argparse\nimport asyncio\nimport sys\nimport time\nfrom pathlib import Path\n\nimport pytest\n\ndef run_health_check():\n    \"\"\"Quick health check before running tests\"\"\"\n    print(\"🔍 Running pre-test health check...\")\n    \n    try:\n        import httpx\n        response = httpx.get(\"http://localhost:8002/api/health\", timeout=10.0)\n        if response.status_code == 200:\n            health = response.json()\n            print(f\"✅ API Health: {health.get('status', 'unknown')}\")\n            return True\n        else:\n            print(f\"❌ API Health Check Failed: {response.status_code}\")\n            return False\n    except Exception as e:\n        print(f\"❌ API Not Available: {e}\")\n        return False\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"TORI E2E Test Runner\")\n    parser.add_argument(\"--quick\", action=\"store_true\", help=\"Run quick tests only (no stress tests)\")\n    parser.add_argument(\"--stress\", action=\"store_true\", help=\"Run stress tests only\")\n    parser.add_argument(\"--upload\", action=\"store_true\", help=\"Run upload tests only\")\n    parser.add_argument(\"--chat\", action=\"store_true\", help=\"Run chat tests only\")\n    parser.add_argument(\"--integration\", action=\"store_true\", help=\"Run integration tests only\")\n    parser.add_argument(\"--verbose\", \"-v\", action=\"store_true\", help=\"Verbose output\")\n    parser.add_argument(\"--no-health-check\", action=\"store_true\", help=\"Skip health check\")\n    parser.add_argument(\"--parallel\", \"-n\", type=int, default=1, help=\"Number of parallel workers\")\n    \n    args = parser.parse_args()\n    \n    # Health check\n    if not args.no_health_check:\n        if not run_health_check():\n            print(\"\\n❌ Health check failed. Make sure TORI API is running on localhost:8002\")\n            print(\"   Start the API with: python enhanced_launcher.py\")\n            sys.exit(1)\n    \n    # Build pytest arguments\n    pytest_args = []\n    \n    if args.verbose:\n        pytest_args.extend([\"-v\", \"-s\"])\n    \n    if args.parallel > 1:\n        pytest_args.extend([\"-n\", str(args.parallel)])\n    \n    # Test selection\n    if args.quick:\n        pytest_args.extend([\"-m\", \"e2e and not stress and not slow\"])\n    elif args.stress:\n        pytest_args.extend([\"-m\", \"stress\"])\n    elif args.upload:\n        pytest_args.extend([\"-m\", \"upload\"])\n    elif args.chat:\n        pytest_args.extend([\"-m\", \"chat\"])\n    elif args.integration:\n        pytest_args.append(\"test_e2e.py::test_complete_pipeline_integration\")\n    else:\n        # Run all tests\n        pytest_args.extend([\"-m\", \"e2e\"])\n    \n    # Add test directory\n    test_dir = Path(__file__).parent\n    pytest_args.append(str(test_dir))\n    \n    print(f\"\\n🚀 Starting TORI E2E Tests...\")\n    print(f\"📋 Test Command: pytest {' '.join(pytest_args)}\")\n    print(f\"⏰ Start Time: {time.strftime('%Y-%m-%d %H:%M:%S')}\\n\")\n    \n    # Run tests\n    start_time = time.time()\n    exit_code = pytest.main(pytest_args)\n    duration = time.time() - start_time\n    \n    print(f\"\\n📊 Test Summary:\")\n    print(f\"⏰ Duration: {duration:.2f} seconds\")\n    \n    if exit_code == 0:\n        print(f\"✅ All tests passed! TORI is ready for production deployment.\")\n    else:\n        print(f\"❌ Some tests failed (exit code: {exit_code})\")\n        print(f\"📋 Review the output above for details.\")\n    \n    return exit_code\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n