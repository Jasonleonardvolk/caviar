#!/usr/bin/env python3\n\"\"\"\nPrajna Continuous Knowledge Feeder\n=================================\n\nContinuous monitoring and ingestion of new data for Prajna's consciousness.\nWatches for new files and automatically processes them.\n\"\"\"\n\nimport asyncio\nimport logging\nimport time\nfrom pathlib import Path\nfrom watchdog.observers import Observer\nfrom watchdog.events import FileSystemEventHandler\nimport json\nfrom datetime import datetime\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(\"prajna.continuous\")\n\nclass PrajnaKnowledgeFeeder(FileSystemEventHandler):\n    \"\"\"Continuous knowledge feeding for Prajna\"\"\"\n    \n    def __init__(self, data_directory: str):\n        self.data_dir = Path(data_directory)\n        self.processing_queue = asyncio.Queue()\n        self.stats = {\n            'files_detected': 0,\n            'files_processed': 0,\n            'start_time': time.time()\n        }\n        \n    def on_created(self, event):\n        \"\"\"Handle new file creation\"\"\"\n        if not event.is_directory:\n            logger.info(f\"📁 New file detected: {event.src_path}\")\n            asyncio.create_task(self.process_new_file(event.src_path))\n    \n    def on_modified(self, event):\n        \"\"\"Handle file modification\"\"\"\n        if not event.is_directory:\n            logger.info(f\"✏️ File modified: {event.src_path}\")\n            asyncio.create_task(self.process_new_file(event.src_path))\n    \n    async def process_new_file(self, file_path: str):\n        \"\"\"Process a newly detected file\"\"\"\n        try:\n            file_path = Path(file_path)\n            \n            # Wait a moment for file to be fully written\n            await asyncio.sleep(1)\n            \n            if not file_path.exists():\n                return\n            \n            self.stats['files_detected'] += 1\n            \n            # Create knowledge entry\n            knowledge_entry = {\n                'path': str(file_path),\n                'name': file_path.name,\n                'size': file_path.stat().st_size,\n                'type': file_path.suffix.lower(),\n                'detected_at': datetime.now().isoformat(),\n                'content_summary': f\"New file: {file_path.name}\"\n            }\n            \n            # Save to processing log\n            await self.log_processing(knowledge_entry)\n            \n            self.stats['files_processed'] += 1\n            \n            logger.info(f\"✅ Processed: {file_path.name} ({self.stats['files_processed']} total)\")\n            \n        except Exception as e:\n            logger.error(f\"❌ Failed to process {file_path}: {e}\")\n    \n    async def log_processing(self, entry: dict):\n        \"\"\"Log processed file to knowledge feed\"\"\"\n        log_file = Path(\"prajna_continuous_feed.jsonl\")\n        \n        with open(log_file, 'a', encoding='utf-8') as f:\n            f.write(json.dumps(entry) + '\\n')\n    \n    def get_stats(self) -> dict:\n        \"\"\"Get processing statistics\"\"\"\n        elapsed = time.time() - self.stats['start_time']\n        return {\n            **self.stats,\n            'elapsed_time': elapsed,\n            'processing_rate': self.stats['files_processed'] / max(1, elapsed)\n        }\n\nasync def start_continuous_feeding(data_directory: str):\n    \"\"\"Start continuous knowledge feeding\"\"\"\n    logger.info(f\"🍽️ Starting continuous feeding of Prajna's consciousness...\")\n    logger.info(f\"👀 Watching directory: {data_directory}\")\n    \n    # Create event handler\n    event_handler = PrajnaKnowledgeFeeder(data_directory)\n    \n    # Setup file system observer\n    observer = Observer()\n    observer.schedule(event_handler, data_directory, recursive=True)\n    observer.start()\n    \n    try:\n        logger.info(\"✅ Continuous feeding started! Prajna is now learning in real-time...\")\n        \n        # Status updates every 30 seconds\n        while True:\n            await asyncio.sleep(30)\n            stats = event_handler.get_stats()\n            logger.info(f\"📊 Status: {stats['files_processed']} files processed, \"\n                       f\"{stats['processing_rate']:.2f} files/sec\")\n            \n    except KeyboardInterrupt:\n        logger.info(\"🛑 Stopping continuous feeding...\")\n        observer.stop()\n    \n    observer.join()\n    \n    # Final stats\n    final_stats = event_handler.get_stats()\n    logger.info(f\"\\n🎉 Continuous feeding session complete!\")\n    logger.info(f\"📊 Total files processed: {final_stats['files_processed']}\")\n    logger.info(f\"📊 Session duration: {final_stats['elapsed_time']:.1f} seconds\")\n    logger.info(f\"📊 Average rate: {final_stats['processing_rate']:.2f} files/sec\")\n\nif __name__ == \"__main__\":\n    data_dir = \"C:\\\\Users\\\\jason\\\\Desktop\\\\tori\\\\kha\\\\data\"\n    \n    print(\"🧠 PRAJNA CONTINUOUS KNOWLEDGE FEEDER\")\n    print(\"=====================================\")\n    print(f\"📂 Monitoring: {data_dir}\")\n    print(\"🔄 Real-time processing enabled\")\n    print(\"⚡ Prajna will learn from new files automatically\")\n    print(\"\\nPress Ctrl+C to stop...\\n\")\n    \n    try:\n        asyncio.run(start_continuous_feeding(data_dir))\n    except KeyboardInterrupt:\n        print(\"\\n👋 Goodbye! Prajna's consciousness has been fed.\")\n