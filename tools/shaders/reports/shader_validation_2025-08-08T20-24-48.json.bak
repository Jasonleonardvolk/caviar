{
  "timestamp": "2025-08-08T20:24:47.999Z",
  "directory": "C:\\Users\\jason\\Desktop\\tori\\kha\\frontend",
  "deviceLimits": {
    "maxComputeWorkgroupSizeX": 256,
    "maxComputeWorkgroupSizeY": 256,
    "maxComputeWorkgroupSizeZ": 64,
    "maxComputeInvocationsPerWorkgroup": 256,
    "maxComputeWorkgroupStorageSize": 32768,
    "label": "iphone15_profile_example"
  },
  "summary": {
    "total": 84,
    "passed": 41,
    "failed": 43,
    "warnings": 715,
    "fixed": 0
  },
  "shaders": [
    {
      "file": "frontend\\hybrid\\wgsl\\lightFieldComposerEnhanced.wgsl",
      "hash": "7b527dfa",
      "size": 11538,
      "lines": 307,
      "timestamp": "2025-08-08T20:24:43.480Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: wrong number of arguments: expected 4, found 3\n    ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\hybrid\\wgsl\\.temp_lightFieldComposerEnhanced.wgsl:133:22\n    │\n133 │     let baseColor1 = textureLoad(baseTex, vec2<i32>(localCoord), i32(baseViewIdx));\n    │                      ^^^^^^^^^^^ wrong number of arguments\n\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 161,
          "message": "Consider using 'const' instead of 'let' for 'foveationStrength'"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: wrong number of arguments: expected 4, found 3\n    ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\hybrid\\wgsl\\.temp_lightFieldComposerEnhanced.wgsl:133:22\n    │\n133 │     let baseColor1 = textureLoad(baseTex, vec2<i32>(localCoord), i32(baseViewIdx));\n    │                      ^^^^^^^^^^^ wrong number of arguments\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\lib\\webgpu\\shaders\\avatarShader.wgsl",
      "hash": "d123a6c6",
      "size": 2557,
      "lines": 83,
      "timestamp": "2025-08-08T20:24:43.563Z",
      "errors": [],
      "warnings": [
        {
          "rule": "VEC3_STORAGE_ALIGNMENT",
          "line": 18,
          "message": "vec3 in storage buffer should be followed by padding or another vec3"
        },
        {
          "rule": "VEC3_STORAGE_ALIGNMENT",
          "line": 25,
          "message": "vec3 in storage buffer should be followed by padding or another vec3"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\lib\\webgpu\\shaders\\bitReversal.wgsl",
      "hash": "c8648a10",
      "size": 1870,
      "lines": 60,
      "timestamp": "2025-08-08T20:24:43.600Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 55,
          "message": "Dynamic array access 'bit_reversal[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 58,
          "message": "Dynamic array access 'output[offset + j]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 58,
          "message": "Dynamic array access 'input[offset + i]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\lib\\webgpu\\shaders\\butterflyStage.wgsl",
      "hash": "d94814fc",
      "size": 4833,
      "lines": 144,
      "timestamp": "2025-08-08T20:24:43.641Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 73,
          "message": "Dynamic array access 'twiddles[twiddle_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 76,
          "message": "Dynamic array access 'input[idx_a]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 77,
          "message": "Dynamic array access 'input[idx_b]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 83,
          "message": "Dynamic array access 'output[idx_a]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 84,
          "message": "Dynamic array access 'output[idx_b]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 120,
          "message": "Dynamic array access 'shared_data[local_idx * 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 120,
          "message": "Dynamic array access 'input[idx_a]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 121,
          "message": "Dynamic array access 'shared_data[local_idx * 2u + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 121,
          "message": "Dynamic array access 'input[idx_b]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 126,
          "message": "Dynamic array access 'shared_data[local_idx * 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 127,
          "message": "Dynamic array access 'shared_data[local_idx * 2u + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 130,
          "message": "Dynamic array access 'twiddles[twiddle_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 134,
          "message": "Dynamic array access 'output[idx_a]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 135,
          "message": "Dynamic array access 'output[idx_b]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\lib\\webgpu\\shaders\\fftShift.wgsl",
      "hash": "ad2ba16f",
      "size": 1094,
      "lines": 46,
      "timestamp": "2025-08-08T20:24:43.709Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 34,
          "message": "Dynamic array access 'output[batch * N2 + j]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 34,
          "message": "Dynamic array access 'input[batch * N2 + i]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\lib\\webgpu\\shaders\\hybridWavefieldBlend.wgsl",
      "hash": "4c6e4233",
      "size": 15943,
      "lines": 393,
      "timestamp": "2025-08-08T20:24:43.777Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\lib\\webgpu\\shaders\\.temp_hybridWavefieldBlend.wgsl:1:1\n  │\n1 │ {\n  │ ^ expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file\n\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 224,
          "message": "Consider using 'const' instead of 'let' for 'physical_magnitude'"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 116,
          "message": "Dynamic array access 'oscillator_phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 117,
          "message": "Dynamic array access 'oscillator_amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 152,
          "message": "Dynamic array access 'soliton_memory[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 153,
          "message": "Dynamic array access 'curvature_field[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 154,
          "message": "Dynamic array access 'memory_gradients[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 298,
          "message": "Dynamic array access 'physical_hologram[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 299,
          "message": "Dynamic array access 'computational_wavefield[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 316,
          "message": "Dynamic array access 'hybrid_output[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 364,
          "message": "Dynamic array access 'hybrid_output[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 380,
          "message": "Dynamic array access 'physical_hologram[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 381,
          "message": "Dynamic array access 'computational_wavefield[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 390,
          "message": "Dynamic array access 'hybrid_output[pixel_idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\lib\\webgpu\\shaders\\.temp_hybridWavefieldBlend.wgsl:1:1\n  │\n1 │ {\n  │ ^ expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\lib\\webgpu\\shaders\\lenticularInterlace.wgsl",
      "hash": "8416f301",
      "size": 16151,
      "lines": 458,
      "timestamp": "2025-08-08T20:24:43.851Z",
      "errors": [],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 235,
          "message": "Consider using 'const' instead of 'let' for 'subpixel_width'"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\lib\\webgpu\\shaders\\lightFieldComposer.wgsl",
      "hash": "d75d6928",
      "size": 4876,
      "lines": 97,
      "timestamp": "2025-08-08T20:24:43.922Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: wrong number of arguments: expected 4, found 3\n   ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\lib\\webgpu\\shaders\\.temp_lightFieldComposer.wgsl:69:40\n   │\n69 │             let baseColor: vec4<f32> = textureLoad(baseTex, vec2<i32>(local_x, local_y), i32(viewIndex));\n   │                                        ^^^^^^^^^^^ wrong number of arguments\n\n\n"
        }
      ],
      "warnings": [],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: wrong number of arguments: expected 4, found 3\n   ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\lib\\webgpu\\shaders\\.temp_lightFieldComposer.wgsl:69:40\n   │\n69 │             let baseColor: vec4<f32> = textureLoad(baseTex, vec2<i32>(local_x, local_y), i32(viewIndex));\n   │                                        ^^^^^^^^^^^ wrong number of arguments\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\lib\\webgpu\\shaders\\multiDepthWaveSynth.wgsl",
      "hash": "943dcd8c",
      "size": 3608,
      "lines": 77,
      "timestamp": "2025-08-08T20:24:43.978Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: expected `;`, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\lib\\webgpu\\shaders\\.temp_multiDepthWaveSynth.wgsl:5:51\n  │\n5 │ @group(0) @binding(2) var<uniform> params: struct {\n  │                                                   ^ expected `;`\n\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 58,
          "message": "Consider using 'const' instead of 'let' for 'lambda'"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 40,
          "message": "Dynamic array access 'inputWave[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 41,
          "message": "Dynamic array access 'inputWave[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 55,
          "message": "Dynamic array access 'depths[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 75,
          "message": "Dynamic array access 'outputWave[idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: expected `;`, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\lib\\webgpu\\shaders\\.temp_multiDepthWaveSynth.wgsl:5:51\n  │\n5 │ @group(0) @binding(2) var<uniform> params: struct {\n  │                                                   ^ expected `;`\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\lib\\webgpu\\shaders\\multiViewSynthesis.wgsl",
      "hash": "41a30c56",
      "size": 16067,
      "lines": 394,
      "timestamp": "2025-08-08T20:24:44.062Z",
      "errors": [
        {
          "rule": "WORKGROUP_SIZE_LIMITS",
          "line": 322,
          "message": "Total invocations (512) exceeds device limit (256)"
        }
      ],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 170,
          "message": "Consider using 'const' instead of 'let' for 'phase_tilt_y'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 238,
          "message": "Consider using 'const' instead of 'let' for 'a'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 239,
          "message": "Consider using 'const' instead of 'let' for 'b'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 240,
          "message": "Consider using 'const' instead of 'let' for 'c'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 241,
          "message": "Consider using 'const' instead of 'let' for 'd'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 242,
          "message": "Consider using 'const' instead of 'let' for 'e'"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 151,
          "message": "Dynamic array access 'shared_field_r[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 152,
          "message": "Dynamic array access 'shared_field_g[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 153,
          "message": "Dynamic array access 'shared_field_b[shared_idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\lib\\webgpu\\shaders\\normalize.wgsl",
      "hash": "357fe12f",
      "size": 1130,
      "lines": 39,
      "timestamp": "2025-08-08T20:24:44.158Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 36,
          "message": "Dynamic array access 'input[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 37,
          "message": "Dynamic array access 'output[idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\lib\\webgpu\\shaders\\phaseOcclusion.wgsl",
      "hash": "9dc7f52b",
      "size": 2794,
      "lines": 60,
      "timestamp": "2025-08-08T20:24:44.204Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: expected `;`, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\lib\\webgpu\\shaders\\.temp_phaseOcclusion.wgsl:5:51\n  │\n5 │ @group(0) @binding(3) var<uniform> params: struct {\n  │                                                   ^ expected `;`\n\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 23,
          "message": "Dynamic array access 'inputWave[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 24,
          "message": "Dynamic array access 'inputWave[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 26,
          "message": "Dynamic array access 'occlusion[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 29,
          "message": "Dynamic array access 'occlusion[idx + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 30,
          "message": "Dynamic array access 'occlusion[idx - 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 31,
          "message": "Dynamic array access 'occlusion[idx + w]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 32,
          "message": "Dynamic array access 'occlusion[idx - w]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 47,
          "message": "Dynamic array access 'outputWave[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 57,
          "message": "Dynamic array access 'outputWave[idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: expected `;`, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\lib\\webgpu\\shaders\\.temp_phaseOcclusion.wgsl:5:51\n  │\n5 │ @group(0) @binding(3) var<uniform> params: struct {\n  │                                                   ^ expected `;`\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\lib\\webgpu\\shaders\\propagation.wgsl",
      "hash": "f55802e7",
      "size": 19296,
      "lines": 502,
      "timestamp": "2025-08-08T20:24:44.266Z",
      "errors": [],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 493,
          "message": "Consider using 'const' instead of 'let' for 'view_angle'"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 282,
          "message": "Dynamic array access 'shared_transfer[local_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 381,
          "message": "Dynamic array access 'wavelengths[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 382,
          "message": "Dynamic array access 'spectral_weights[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 421,
          "message": "Dynamic array access 'wavelengths[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 422,
          "message": "Dynamic array access 'spectral_weights[i]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\lib\\webgpu\\shaders\\topologicalOverlay.wgsl",
      "hash": "c544be29",
      "size": 9588,
      "lines": 311,
      "timestamp": "2025-08-08T20:24:44.336Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[1m: Entry point cs_update_charges at Compute is invalid\u001b[0m\n    \u001b[0m\u001b[36m┌─\u001b[0m .temp_topologicalOverlay.wgsl:309:5\n    \u001b[0m\u001b[36m│\u001b[0m\n\u001b[0m\u001b[36m309\u001b[0m \u001b[0m\u001b[36m│\u001b[0m     \u001b[0m\u001b[31mcharges[index]\u001b[0m = charge;\n    \u001b[0m\u001b[36m│\u001b[0m     \u001b[0m\u001b[31m^^^^^^^^^^^^^^\u001b[0m \u001b[0m\u001b[31mwriting to this location is not permitted\u001b[0m\n    \u001b[0m\u001b[36m│\u001b[0m\n    \u001b[0m\u001b[36m=\u001b[0m The pointer [96] doesn't relate to a valid destination for a store\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 158,
          "message": "Consider using 'const' instead of 'let' for 's'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 159,
          "message": "Consider using 'const' instead of 'let' for 'v'"
        },
        {
          "rule": "VEC3_STORAGE_ALIGNMENT",
          "line": 22,
          "message": "vec3 in storage buffer should be followed by padding or another vec3"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 61,
          "message": "Dynamic array access 'charges[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 83,
          "message": "Dynamic array access 'charges[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 106,
          "message": "Dynamic array access 'charges[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 126,
          "message": "Dynamic array access 'charges[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 268,
          "message": "Dynamic array access 'charges[index]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 290,
          "message": "Dynamic array access 'charges[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 309,
          "message": "Dynamic array access 'charges[index]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[1m: Entry point cs_update_charges at Compute is invalid\u001b[0m\n    \u001b[0m\u001b[36m┌─\u001b[0m .temp_topologicalOverlay.wgsl:309:5\n    \u001b[0m\u001b[36m│\u001b[0m\n\u001b[0m\u001b[36m309\u001b[0m \u001b[0m\u001b[36m│\u001b[0m     \u001b[0m\u001b[31mcharges[index]\u001b[0m = charge;\n    \u001b[0m\u001b[36m│\u001b[0m     \u001b[0m\u001b[31m^^^^^^^^^^^^^^\u001b[0m \u001b[0m\u001b[31mwriting to this location is not permitted\u001b[0m\n    \u001b[0m\u001b[36m│\u001b[0m\n    \u001b[0m\u001b[36m=\u001b[0m The pointer [96] doesn't relate to a valid destination for a store\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\lib\\webgpu\\shaders\\transpose.wgsl",
      "hash": "4b0cdbfb",
      "size": 5290,
      "lines": 149,
      "timestamp": "2025-08-08T20:24:44.397Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 52,
          "message": "Dynamic array access 'tile[local_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 52,
          "message": "Dynamic array access 'input[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 55,
          "message": "Dynamic array access 'tile[local_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 70,
          "message": "Dynamic array access 'output[transposed_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 70,
          "message": "Dynamic array access 'tile[transposed_local]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'tile[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'input[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 111,
          "message": "Dynamic array access 'output[transposed_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 111,
          "message": "Dynamic array access 'tile[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 134,
          "message": "Dynamic array access 'input[idx1]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 135,
          "message": "Dynamic array access 'output[idx1]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 135,
          "message": "Dynamic array access 'input[idx2]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 136,
          "message": "Dynamic array access 'output[idx2]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\lib\\webgpu\\shaders\\velocityField.wgsl",
      "hash": "b57ef2d0",
      "size": 14968,
      "lines": 422,
      "timestamp": "2025-08-08T20:24:44.430Z",
      "errors": [],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 336,
          "message": "Consider using 'const' instead of 'let' for 'momentum'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 397,
          "message": "Consider using 'const' instead of 'let' for 'value'"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 82,
          "message": "Dynamic array access 'shared_wavefield[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 93,
          "message": "Dynamic array access 'shared_wavefield[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 94,
          "message": "Dynamic array access 'shared_wavefield[idx - 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 95,
          "message": "Dynamic array access 'shared_wavefield[idx + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 96,
          "message": "Dynamic array access 'shared_wavefield[idx - 10u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'shared_wavefield[idx + 10u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 124,
          "message": "Dynamic array access 'spatial_freqs[packed_idx0]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 125,
          "message": "Dynamic array access 'spatial_freqs[packed_idx1]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 192,
          "message": "Dynamic array access 'phases[i / 4u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 228,
          "message": "Dynamic array access 'shared_wavefield[idx - 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 229,
          "message": "Dynamic array access 'shared_wavefield[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 230,
          "message": "Dynamic array access 'shared_wavefield[idx + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 234,
          "message": "Dynamic array access 'shared_wavefield[idx - 10u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 235,
          "message": "Dynamic array access 'shared_wavefield[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 236,
          "message": "Dynamic array access 'shared_wavefield[idx + 10u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 300,
          "message": "Dynamic array access 'particles[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 368,
          "message": "Dynamic array access 'particles[idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\lib\\webgpu\\shaders\\wavefieldEncoder.wgsl",
      "hash": "3cc23d93",
      "size": 9739,
      "lines": 279,
      "timestamp": "2025-08-08T20:24:44.499Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file, found \"\\u{feff}\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\lib\\webgpu\\shaders\\.temp_wavefieldEncoder.wgsl:1:1\n  │\n1 │ ﻿// C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders\\wavefieldEncoder.wgsl\n  │  expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file\n\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'shared_spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 98,
          "message": "Dynamic array access 'shared_phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 98,
          "message": "Dynamic array access 'phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 99,
          "message": "Dynamic array access 'shared_amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 99,
          "message": "Dynamic array access 'amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 112,
          "message": "Dynamic array access 'shared_spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 113,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 114,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 115,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 117,
          "message": "Dynamic array access 'shared_phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 118,
          "message": "Dynamic array access 'shared_phases[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 119,
          "message": "Dynamic array access 'shared_phases[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 120,
          "message": "Dynamic array access 'shared_phases[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 122,
          "message": "Dynamic array access 'shared_amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 123,
          "message": "Dynamic array access 'shared_amplitudes[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 124,
          "message": "Dynamic array access 'shared_amplitudes[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 125,
          "message": "Dynamic array access 'shared_amplitudes[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 174,
          "message": "Dynamic array access 'dispersion_factors[channel % 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 176,
          "message": "Dynamic array access 'phases[phase_idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file, found \"\\u{feff}\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\lib\\webgpu\\shaders\\.temp_wavefieldEncoder.wgsl:1:1\n  │\n1 │ ﻿// C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders\\wavefieldEncoder.wgsl\n  │  expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\lib\\webgpu\\shaders\\wavefieldEncoder_optimized.wgsl",
      "hash": "2fec729a",
      "size": 9748,
      "lines": 278,
      "timestamp": "2025-08-08T20:24:44.565Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'shared_spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 98,
          "message": "Dynamic array access 'shared_phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 98,
          "message": "Dynamic array access 'phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 99,
          "message": "Dynamic array access 'shared_amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 99,
          "message": "Dynamic array access 'amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 112,
          "message": "Dynamic array access 'shared_spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 113,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 114,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 115,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 117,
          "message": "Dynamic array access 'shared_phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 118,
          "message": "Dynamic array access 'shared_phases[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 119,
          "message": "Dynamic array access 'shared_phases[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 120,
          "message": "Dynamic array access 'shared_phases[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 122,
          "message": "Dynamic array access 'shared_amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 123,
          "message": "Dynamic array access 'shared_amplitudes[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 124,
          "message": "Dynamic array access 'shared_amplitudes[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 125,
          "message": "Dynamic array access 'shared_amplitudes[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 174,
          "message": "Dynamic array access 'dispersion_factors[channel % 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 176,
          "message": "Dynamic array access 'phases[phase_idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\public\\hybrid\\wgsl\\avatarShader.wgsl",
      "hash": "d123a6c6",
      "size": 2557,
      "lines": 83,
      "timestamp": "2025-08-08T20:24:44.629Z",
      "errors": [],
      "warnings": [
        {
          "rule": "VEC3_STORAGE_ALIGNMENT",
          "line": 18,
          "message": "vec3 in storage buffer should be followed by padding or another vec3"
        },
        {
          "rule": "VEC3_STORAGE_ALIGNMENT",
          "line": 25,
          "message": "vec3 in storage buffer should be followed by padding or another vec3"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\public\\hybrid\\wgsl\\bitReversal.wgsl",
      "hash": "c8648a10",
      "size": 1870,
      "lines": 60,
      "timestamp": "2025-08-08T20:24:44.678Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 55,
          "message": "Dynamic array access 'bit_reversal[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 58,
          "message": "Dynamic array access 'output[offset + j]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 58,
          "message": "Dynamic array access 'input[offset + i]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\public\\hybrid\\wgsl\\butterflyStage.wgsl",
      "hash": "d94814fc",
      "size": 4833,
      "lines": 144,
      "timestamp": "2025-08-08T20:24:44.741Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 73,
          "message": "Dynamic array access 'twiddles[twiddle_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 76,
          "message": "Dynamic array access 'input[idx_a]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 77,
          "message": "Dynamic array access 'input[idx_b]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 83,
          "message": "Dynamic array access 'output[idx_a]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 84,
          "message": "Dynamic array access 'output[idx_b]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 120,
          "message": "Dynamic array access 'shared_data[local_idx * 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 120,
          "message": "Dynamic array access 'input[idx_a]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 121,
          "message": "Dynamic array access 'shared_data[local_idx * 2u + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 121,
          "message": "Dynamic array access 'input[idx_b]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 126,
          "message": "Dynamic array access 'shared_data[local_idx * 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 127,
          "message": "Dynamic array access 'shared_data[local_idx * 2u + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 130,
          "message": "Dynamic array access 'twiddles[twiddle_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 134,
          "message": "Dynamic array access 'output[idx_a]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 135,
          "message": "Dynamic array access 'output[idx_b]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\public\\hybrid\\wgsl\\fftShift.wgsl",
      "hash": "ad2ba16f",
      "size": 1094,
      "lines": 46,
      "timestamp": "2025-08-08T20:24:44.795Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 34,
          "message": "Dynamic array access 'output[batch * N2 + j]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 34,
          "message": "Dynamic array access 'input[batch * N2 + i]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\public\\hybrid\\wgsl\\hybridWavefieldBlend.wgsl",
      "hash": "4c6e4233",
      "size": 15943,
      "lines": 393,
      "timestamp": "2025-08-08T20:24:44.840Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\public\\hybrid\\wgsl\\.temp_hybridWavefieldBlend.wgsl:1:1\n  │\n1 │ {\n  │ ^ expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file\n\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 224,
          "message": "Consider using 'const' instead of 'let' for 'physical_magnitude'"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 116,
          "message": "Dynamic array access 'oscillator_phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 117,
          "message": "Dynamic array access 'oscillator_amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 152,
          "message": "Dynamic array access 'soliton_memory[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 153,
          "message": "Dynamic array access 'curvature_field[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 154,
          "message": "Dynamic array access 'memory_gradients[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 298,
          "message": "Dynamic array access 'physical_hologram[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 299,
          "message": "Dynamic array access 'computational_wavefield[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 316,
          "message": "Dynamic array access 'hybrid_output[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 364,
          "message": "Dynamic array access 'hybrid_output[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 380,
          "message": "Dynamic array access 'physical_hologram[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 381,
          "message": "Dynamic array access 'computational_wavefield[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 390,
          "message": "Dynamic array access 'hybrid_output[pixel_idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\public\\hybrid\\wgsl\\.temp_hybridWavefieldBlend.wgsl:1:1\n  │\n1 │ {\n  │ ^ expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\public\\hybrid\\wgsl\\lenticularInterlace.wgsl",
      "hash": "8416f301",
      "size": 16151,
      "lines": 458,
      "timestamp": "2025-08-08T20:24:44.907Z",
      "errors": [],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 235,
          "message": "Consider using 'const' instead of 'let' for 'subpixel_width'"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\public\\hybrid\\wgsl\\lightFieldComposer.wgsl",
      "hash": "d75d6928",
      "size": 4876,
      "lines": 97,
      "timestamp": "2025-08-08T20:24:44.973Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: wrong number of arguments: expected 4, found 3\n   ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\public\\hybrid\\wgsl\\.temp_lightFieldComposer.wgsl:69:40\n   │\n69 │             let baseColor: vec4<f32> = textureLoad(baseTex, vec2<i32>(local_x, local_y), i32(viewIndex));\n   │                                        ^^^^^^^^^^^ wrong number of arguments\n\n\n"
        }
      ],
      "warnings": [],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: wrong number of arguments: expected 4, found 3\n   ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\public\\hybrid\\wgsl\\.temp_lightFieldComposer.wgsl:69:40\n   │\n69 │             let baseColor: vec4<f32> = textureLoad(baseTex, vec2<i32>(local_x, local_y), i32(viewIndex));\n   │                                        ^^^^^^^^^^^ wrong number of arguments\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\public\\hybrid\\wgsl\\multiDepthWaveSynth.wgsl",
      "hash": "943dcd8c",
      "size": 3608,
      "lines": 77,
      "timestamp": "2025-08-08T20:24:45.007Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: expected `;`, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\public\\hybrid\\wgsl\\.temp_multiDepthWaveSynth.wgsl:5:51\n  │\n5 │ @group(0) @binding(2) var<uniform> params: struct {\n  │                                                   ^ expected `;`\n\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 58,
          "message": "Consider using 'const' instead of 'let' for 'lambda'"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 40,
          "message": "Dynamic array access 'inputWave[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 41,
          "message": "Dynamic array access 'inputWave[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 55,
          "message": "Dynamic array access 'depths[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 75,
          "message": "Dynamic array access 'outputWave[idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: expected `;`, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\public\\hybrid\\wgsl\\.temp_multiDepthWaveSynth.wgsl:5:51\n  │\n5 │ @group(0) @binding(2) var<uniform> params: struct {\n  │                                                   ^ expected `;`\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\public\\hybrid\\wgsl\\multiViewSynthesis.wgsl",
      "hash": "41a30c56",
      "size": 16067,
      "lines": 394,
      "timestamp": "2025-08-08T20:24:45.046Z",
      "errors": [
        {
          "rule": "WORKGROUP_SIZE_LIMITS",
          "line": 322,
          "message": "Total invocations (512) exceeds device limit (256)"
        }
      ],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 170,
          "message": "Consider using 'const' instead of 'let' for 'phase_tilt_y'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 238,
          "message": "Consider using 'const' instead of 'let' for 'a'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 239,
          "message": "Consider using 'const' instead of 'let' for 'b'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 240,
          "message": "Consider using 'const' instead of 'let' for 'c'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 241,
          "message": "Consider using 'const' instead of 'let' for 'd'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 242,
          "message": "Consider using 'const' instead of 'let' for 'e'"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 151,
          "message": "Dynamic array access 'shared_field_r[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 152,
          "message": "Dynamic array access 'shared_field_g[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 153,
          "message": "Dynamic array access 'shared_field_b[shared_idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\public\\hybrid\\wgsl\\normalize.wgsl",
      "hash": "357fe12f",
      "size": 1130,
      "lines": 39,
      "timestamp": "2025-08-08T20:24:45.112Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 36,
          "message": "Dynamic array access 'input[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 37,
          "message": "Dynamic array access 'output[idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\public\\hybrid\\wgsl\\phaseOcclusion.wgsl",
      "hash": "9dc7f52b",
      "size": 2794,
      "lines": 60,
      "timestamp": "2025-08-08T20:24:45.145Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: expected `;`, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\public\\hybrid\\wgsl\\.temp_phaseOcclusion.wgsl:5:51\n  │\n5 │ @group(0) @binding(3) var<uniform> params: struct {\n  │                                                   ^ expected `;`\n\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 23,
          "message": "Dynamic array access 'inputWave[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 24,
          "message": "Dynamic array access 'inputWave[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 26,
          "message": "Dynamic array access 'occlusion[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 29,
          "message": "Dynamic array access 'occlusion[idx + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 30,
          "message": "Dynamic array access 'occlusion[idx - 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 31,
          "message": "Dynamic array access 'occlusion[idx + w]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 32,
          "message": "Dynamic array access 'occlusion[idx - w]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 47,
          "message": "Dynamic array access 'outputWave[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 57,
          "message": "Dynamic array access 'outputWave[idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: expected `;`, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\public\\hybrid\\wgsl\\.temp_phaseOcclusion.wgsl:5:51\n  │\n5 │ @group(0) @binding(3) var<uniform> params: struct {\n  │                                                   ^ expected `;`\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\public\\hybrid\\wgsl\\propagation.wgsl",
      "hash": "f55802e7",
      "size": 19296,
      "lines": 502,
      "timestamp": "2025-08-08T20:24:45.177Z",
      "errors": [],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 493,
          "message": "Consider using 'const' instead of 'let' for 'view_angle'"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 282,
          "message": "Dynamic array access 'shared_transfer[local_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 381,
          "message": "Dynamic array access 'wavelengths[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 382,
          "message": "Dynamic array access 'spectral_weights[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 421,
          "message": "Dynamic array access 'wavelengths[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 422,
          "message": "Dynamic array access 'spectral_weights[i]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\public\\hybrid\\wgsl\\topologicalOverlay.wgsl",
      "hash": "c544be29",
      "size": 9588,
      "lines": 311,
      "timestamp": "2025-08-08T20:24:45.243Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[1m: Entry point cs_update_charges at Compute is invalid\u001b[0m\n    \u001b[0m\u001b[36m┌─\u001b[0m .temp_topologicalOverlay.wgsl:309:5\n    \u001b[0m\u001b[36m│\u001b[0m\n\u001b[0m\u001b[36m309\u001b[0m \u001b[0m\u001b[36m│\u001b[0m     \u001b[0m\u001b[31mcharges[index]\u001b[0m = charge;\n    \u001b[0m\u001b[36m│\u001b[0m     \u001b[0m\u001b[31m^^^^^^^^^^^^^^\u001b[0m \u001b[0m\u001b[31mwriting to this location is not permitted\u001b[0m\n    \u001b[0m\u001b[36m│\u001b[0m\n    \u001b[0m\u001b[36m=\u001b[0m The pointer [96] doesn't relate to a valid destination for a store\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 158,
          "message": "Consider using 'const' instead of 'let' for 's'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 159,
          "message": "Consider using 'const' instead of 'let' for 'v'"
        },
        {
          "rule": "VEC3_STORAGE_ALIGNMENT",
          "line": 22,
          "message": "vec3 in storage buffer should be followed by padding or another vec3"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 61,
          "message": "Dynamic array access 'charges[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 83,
          "message": "Dynamic array access 'charges[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 106,
          "message": "Dynamic array access 'charges[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 126,
          "message": "Dynamic array access 'charges[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 268,
          "message": "Dynamic array access 'charges[index]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 290,
          "message": "Dynamic array access 'charges[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 309,
          "message": "Dynamic array access 'charges[index]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[1m: Entry point cs_update_charges at Compute is invalid\u001b[0m\n    \u001b[0m\u001b[36m┌─\u001b[0m .temp_topologicalOverlay.wgsl:309:5\n    \u001b[0m\u001b[36m│\u001b[0m\n\u001b[0m\u001b[36m309\u001b[0m \u001b[0m\u001b[36m│\u001b[0m     \u001b[0m\u001b[31mcharges[index]\u001b[0m = charge;\n    \u001b[0m\u001b[36m│\u001b[0m     \u001b[0m\u001b[31m^^^^^^^^^^^^^^\u001b[0m \u001b[0m\u001b[31mwriting to this location is not permitted\u001b[0m\n    \u001b[0m\u001b[36m│\u001b[0m\n    \u001b[0m\u001b[36m=\u001b[0m The pointer [96] doesn't relate to a valid destination for a store\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\public\\hybrid\\wgsl\\transpose.wgsl",
      "hash": "4b0cdbfb",
      "size": 5290,
      "lines": 149,
      "timestamp": "2025-08-08T20:24:45.305Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 52,
          "message": "Dynamic array access 'tile[local_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 52,
          "message": "Dynamic array access 'input[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 55,
          "message": "Dynamic array access 'tile[local_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 70,
          "message": "Dynamic array access 'output[transposed_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 70,
          "message": "Dynamic array access 'tile[transposed_local]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'tile[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'input[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 111,
          "message": "Dynamic array access 'output[transposed_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 111,
          "message": "Dynamic array access 'tile[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 134,
          "message": "Dynamic array access 'input[idx1]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 135,
          "message": "Dynamic array access 'output[idx1]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 135,
          "message": "Dynamic array access 'input[idx2]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 136,
          "message": "Dynamic array access 'output[idx2]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\public\\hybrid\\wgsl\\velocityField.wgsl",
      "hash": "b57ef2d0",
      "size": 14968,
      "lines": 422,
      "timestamp": "2025-08-08T20:24:45.349Z",
      "errors": [],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 336,
          "message": "Consider using 'const' instead of 'let' for 'momentum'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 397,
          "message": "Consider using 'const' instead of 'let' for 'value'"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 82,
          "message": "Dynamic array access 'shared_wavefield[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 93,
          "message": "Dynamic array access 'shared_wavefield[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 94,
          "message": "Dynamic array access 'shared_wavefield[idx - 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 95,
          "message": "Dynamic array access 'shared_wavefield[idx + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 96,
          "message": "Dynamic array access 'shared_wavefield[idx - 10u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'shared_wavefield[idx + 10u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 124,
          "message": "Dynamic array access 'spatial_freqs[packed_idx0]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 125,
          "message": "Dynamic array access 'spatial_freqs[packed_idx1]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 192,
          "message": "Dynamic array access 'phases[i / 4u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 228,
          "message": "Dynamic array access 'shared_wavefield[idx - 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 229,
          "message": "Dynamic array access 'shared_wavefield[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 230,
          "message": "Dynamic array access 'shared_wavefield[idx + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 234,
          "message": "Dynamic array access 'shared_wavefield[idx - 10u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 235,
          "message": "Dynamic array access 'shared_wavefield[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 236,
          "message": "Dynamic array access 'shared_wavefield[idx + 10u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 300,
          "message": "Dynamic array access 'particles[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 368,
          "message": "Dynamic array access 'particles[idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\public\\hybrid\\wgsl\\wavefieldEncoder.wgsl",
      "hash": "3cc23d93",
      "size": 9739,
      "lines": 279,
      "timestamp": "2025-08-08T20:24:45.418Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file, found \"\\u{feff}\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\public\\hybrid\\wgsl\\.temp_wavefieldEncoder.wgsl:1:1\n  │\n1 │ ﻿// C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders\\wavefieldEncoder.wgsl\n  │  expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file\n\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'shared_spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 98,
          "message": "Dynamic array access 'shared_phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 98,
          "message": "Dynamic array access 'phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 99,
          "message": "Dynamic array access 'shared_amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 99,
          "message": "Dynamic array access 'amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 112,
          "message": "Dynamic array access 'shared_spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 113,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 114,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 115,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 117,
          "message": "Dynamic array access 'shared_phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 118,
          "message": "Dynamic array access 'shared_phases[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 119,
          "message": "Dynamic array access 'shared_phases[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 120,
          "message": "Dynamic array access 'shared_phases[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 122,
          "message": "Dynamic array access 'shared_amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 123,
          "message": "Dynamic array access 'shared_amplitudes[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 124,
          "message": "Dynamic array access 'shared_amplitudes[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 125,
          "message": "Dynamic array access 'shared_amplitudes[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 174,
          "message": "Dynamic array access 'dispersion_factors[channel % 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 176,
          "message": "Dynamic array access 'phases[phase_idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file, found \"\\u{feff}\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\public\\hybrid\\wgsl\\.temp_wavefieldEncoder.wgsl:1:1\n  │\n1 │ ﻿// C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders\\wavefieldEncoder.wgsl\n  │  expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\public\\hybrid\\wgsl\\wavefieldEncoder_optimized.wgsl",
      "hash": "2fec729a",
      "size": 9748,
      "lines": 278,
      "timestamp": "2025-08-08T20:24:45.489Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'shared_spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 98,
          "message": "Dynamic array access 'shared_phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 98,
          "message": "Dynamic array access 'phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 99,
          "message": "Dynamic array access 'shared_amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 99,
          "message": "Dynamic array access 'amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 112,
          "message": "Dynamic array access 'shared_spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 113,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 114,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 115,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 117,
          "message": "Dynamic array access 'shared_phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 118,
          "message": "Dynamic array access 'shared_phases[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 119,
          "message": "Dynamic array access 'shared_phases[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 120,
          "message": "Dynamic array access 'shared_phases[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 122,
          "message": "Dynamic array access 'shared_amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 123,
          "message": "Dynamic array access 'shared_amplitudes[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 124,
          "message": "Dynamic array access 'shared_amplitudes[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 125,
          "message": "Dynamic array access 'shared_amplitudes[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 174,
          "message": "Dynamic array access 'dispersion_factors[channel % 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 176,
          "message": "Dynamic array access 'phases[phase_idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__hybrid__hybridWavefieldBlend.wgsl",
      "hash": "4c6e4233",
      "size": 15943,
      "lines": 393,
      "timestamp": "2025-08-08T20:24:45.556Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__hybrid__hybridWavefieldBlend.wgsl:1:1\n  │\n1 │ {\n  │ ^ expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file\n\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 224,
          "message": "Consider using 'const' instead of 'let' for 'physical_magnitude'"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 116,
          "message": "Dynamic array access 'oscillator_phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 117,
          "message": "Dynamic array access 'oscillator_amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 152,
          "message": "Dynamic array access 'soliton_memory[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 153,
          "message": "Dynamic array access 'curvature_field[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 154,
          "message": "Dynamic array access 'memory_gradients[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 298,
          "message": "Dynamic array access 'physical_hologram[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 299,
          "message": "Dynamic array access 'computational_wavefield[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 316,
          "message": "Dynamic array access 'hybrid_output[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 364,
          "message": "Dynamic array access 'hybrid_output[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 380,
          "message": "Dynamic array access 'physical_hologram[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 381,
          "message": "Dynamic array access 'computational_wavefield[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 390,
          "message": "Dynamic array access 'hybrid_output[pixel_idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__hybrid__hybridWavefieldBlend.wgsl:1:1\n  │\n1 │ {\n  │ ^ expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__hybrid__multiDepthWaveSynth.wgsl",
      "hash": "943dcd8c",
      "size": 3608,
      "lines": 77,
      "timestamp": "2025-08-08T20:24:45.617Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: expected `;`, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__hybrid__multiDepthWaveSynth.wgsl:5:51\n  │\n5 │ @group(0) @binding(2) var<uniform> params: struct {\n  │                                                   ^ expected `;`\n\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 58,
          "message": "Consider using 'const' instead of 'let' for 'lambda'"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 40,
          "message": "Dynamic array access 'inputWave[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 41,
          "message": "Dynamic array access 'inputWave[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 55,
          "message": "Dynamic array access 'depths[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 75,
          "message": "Dynamic array access 'outputWave[idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: expected `;`, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__hybrid__multiDepthWaveSynth.wgsl:5:51\n  │\n5 │ @group(0) @binding(2) var<uniform> params: struct {\n  │                                                   ^ expected `;`\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__hybrid__phaseOcclusion.wgsl",
      "hash": "9dc7f52b",
      "size": 2794,
      "lines": 60,
      "timestamp": "2025-08-08T20:24:45.648Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: expected `;`, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__hybrid__phaseOcclusion.wgsl:5:51\n  │\n5 │ @group(0) @binding(3) var<uniform> params: struct {\n  │                                                   ^ expected `;`\n\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 23,
          "message": "Dynamic array access 'inputWave[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 24,
          "message": "Dynamic array access 'inputWave[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 26,
          "message": "Dynamic array access 'occlusion[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 29,
          "message": "Dynamic array access 'occlusion[idx + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 30,
          "message": "Dynamic array access 'occlusion[idx - 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 31,
          "message": "Dynamic array access 'occlusion[idx + w]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 32,
          "message": "Dynamic array access 'occlusion[idx - w]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 47,
          "message": "Dynamic array access 'outputWave[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 57,
          "message": "Dynamic array access 'outputWave[idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: expected `;`, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__hybrid__phaseOcclusion.wgsl:5:51\n  │\n5 │ @group(0) @binding(3) var<uniform> params: struct {\n  │                                                   ^ expected `;`\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__hybrid__wgsl__lightFieldComposer.wgsl",
      "hash": "d75d6928",
      "size": 4876,
      "lines": 97,
      "timestamp": "2025-08-08T20:24:45.677Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: wrong number of arguments: expected 4, found 3\n   ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__hybrid__wgsl__lightFieldComposer.wgsl:69:40\n   │\n69 │             let baseColor: vec4<f32> = textureLoad(baseTex, vec2<i32>(local_x, local_y), i32(viewIndex));\n   │                                        ^^^^^^^^^^^ wrong number of arguments\n\n\n"
        }
      ],
      "warnings": [],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: wrong number of arguments: expected 4, found 3\n   ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__hybrid__wgsl__lightFieldComposer.wgsl:69:40\n   │\n69 │             let baseColor: vec4<f32> = textureLoad(baseTex, vec2<i32>(local_x, local_y), i32(viewIndex));\n   │                                        ^^^^^^^^^^^ wrong number of arguments\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__public__hybrid__wgsl__avatarShader.wgsl",
      "hash": "d123a6c6",
      "size": 2557,
      "lines": 83,
      "timestamp": "2025-08-08T20:24:45.717Z",
      "errors": [],
      "warnings": [
        {
          "rule": "VEC3_STORAGE_ALIGNMENT",
          "line": 18,
          "message": "vec3 in storage buffer should be followed by padding or another vec3"
        },
        {
          "rule": "VEC3_STORAGE_ALIGNMENT",
          "line": 25,
          "message": "vec3 in storage buffer should be followed by padding or another vec3"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__public__hybrid__wgsl__bitReversal.wgsl",
      "hash": "c8648a10",
      "size": 1870,
      "lines": 60,
      "timestamp": "2025-08-08T20:24:45.755Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 55,
          "message": "Dynamic array access 'bit_reversal[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 58,
          "message": "Dynamic array access 'output[offset + j]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 58,
          "message": "Dynamic array access 'input[offset + i]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__public__hybrid__wgsl__butterflyStage.wgsl",
      "hash": "d94814fc",
      "size": 4833,
      "lines": 144,
      "timestamp": "2025-08-08T20:24:45.797Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 73,
          "message": "Dynamic array access 'twiddles[twiddle_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 76,
          "message": "Dynamic array access 'input[idx_a]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 77,
          "message": "Dynamic array access 'input[idx_b]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 83,
          "message": "Dynamic array access 'output[idx_a]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 84,
          "message": "Dynamic array access 'output[idx_b]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 120,
          "message": "Dynamic array access 'shared_data[local_idx * 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 120,
          "message": "Dynamic array access 'input[idx_a]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 121,
          "message": "Dynamic array access 'shared_data[local_idx * 2u + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 121,
          "message": "Dynamic array access 'input[idx_b]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 126,
          "message": "Dynamic array access 'shared_data[local_idx * 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 127,
          "message": "Dynamic array access 'shared_data[local_idx * 2u + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 130,
          "message": "Dynamic array access 'twiddles[twiddle_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 134,
          "message": "Dynamic array access 'output[idx_a]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 135,
          "message": "Dynamic array access 'output[idx_b]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__public__hybrid__wgsl__fftShift.wgsl",
      "hash": "ad2ba16f",
      "size": 1094,
      "lines": 46,
      "timestamp": "2025-08-08T20:24:45.831Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 34,
          "message": "Dynamic array access 'output[batch * N2 + j]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 34,
          "message": "Dynamic array access 'input[batch * N2 + i]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__public__hybrid__wgsl__hybridWavefieldBlend.wgsl",
      "hash": "4c6e4233",
      "size": 15943,
      "lines": 393,
      "timestamp": "2025-08-08T20:24:45.870Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__public__hybrid__wgsl__hybridWavefieldBlend.wgsl:1:1\n  │\n1 │ {\n  │ ^ expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file\n\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 224,
          "message": "Consider using 'const' instead of 'let' for 'physical_magnitude'"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 116,
          "message": "Dynamic array access 'oscillator_phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 117,
          "message": "Dynamic array access 'oscillator_amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 152,
          "message": "Dynamic array access 'soliton_memory[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 153,
          "message": "Dynamic array access 'curvature_field[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 154,
          "message": "Dynamic array access 'memory_gradients[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 298,
          "message": "Dynamic array access 'physical_hologram[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 299,
          "message": "Dynamic array access 'computational_wavefield[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 316,
          "message": "Dynamic array access 'hybrid_output[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 364,
          "message": "Dynamic array access 'hybrid_output[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 380,
          "message": "Dynamic array access 'physical_hologram[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 381,
          "message": "Dynamic array access 'computational_wavefield[pixel_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 390,
          "message": "Dynamic array access 'hybrid_output[pixel_idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__public__hybrid__wgsl__hybridWavefieldBlend.wgsl:1:1\n  │\n1 │ {\n  │ ^ expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__public__hybrid__wgsl__lenticularInterlace.wgsl",
      "hash": "8416f301",
      "size": 16151,
      "lines": 458,
      "timestamp": "2025-08-08T20:24:45.934Z",
      "errors": [],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 235,
          "message": "Consider using 'const' instead of 'let' for 'subpixel_width'"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__public__hybrid__wgsl__lightFieldComposer.wgsl",
      "hash": "d75d6928",
      "size": 4876,
      "lines": 97,
      "timestamp": "2025-08-08T20:24:45.992Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: wrong number of arguments: expected 4, found 3\n   ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__public__hybrid__wgsl__lightFieldComposer.wgsl:69:40\n   │\n69 │             let baseColor: vec4<f32> = textureLoad(baseTex, vec2<i32>(local_x, local_y), i32(viewIndex));\n   │                                        ^^^^^^^^^^^ wrong number of arguments\n\n\n"
        }
      ],
      "warnings": [],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: wrong number of arguments: expected 4, found 3\n   ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__public__hybrid__wgsl__lightFieldComposer.wgsl:69:40\n   │\n69 │             let baseColor: vec4<f32> = textureLoad(baseTex, vec2<i32>(local_x, local_y), i32(viewIndex));\n   │                                        ^^^^^^^^^^^ wrong number of arguments\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__public__hybrid__wgsl__multiDepthWaveSynth.wgsl",
      "hash": "943dcd8c",
      "size": 3608,
      "lines": 77,
      "timestamp": "2025-08-08T20:24:46.023Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: expected `;`, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__public__hybrid__wgsl__multiDepthWaveSynth.wgsl:5:51\n  │\n5 │ @group(0) @binding(2) var<uniform> params: struct {\n  │                                                   ^ expected `;`\n\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 58,
          "message": "Consider using 'const' instead of 'let' for 'lambda'"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 40,
          "message": "Dynamic array access 'inputWave[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 41,
          "message": "Dynamic array access 'inputWave[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 55,
          "message": "Dynamic array access 'depths[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 75,
          "message": "Dynamic array access 'outputWave[idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: expected `;`, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__public__hybrid__wgsl__multiDepthWaveSynth.wgsl:5:51\n  │\n5 │ @group(0) @binding(2) var<uniform> params: struct {\n  │                                                   ^ expected `;`\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__public__hybrid__wgsl__multiViewSynthesis.wgsl",
      "hash": "41a30c56",
      "size": 16067,
      "lines": 394,
      "timestamp": "2025-08-08T20:24:46.055Z",
      "errors": [
        {
          "rule": "WORKGROUP_SIZE_LIMITS",
          "line": 322,
          "message": "Total invocations (512) exceeds device limit (256)"
        }
      ],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 170,
          "message": "Consider using 'const' instead of 'let' for 'phase_tilt_y'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 238,
          "message": "Consider using 'const' instead of 'let' for 'a'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 239,
          "message": "Consider using 'const' instead of 'let' for 'b'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 240,
          "message": "Consider using 'const' instead of 'let' for 'c'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 241,
          "message": "Consider using 'const' instead of 'let' for 'd'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 242,
          "message": "Consider using 'const' instead of 'let' for 'e'"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 151,
          "message": "Dynamic array access 'shared_field_r[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 152,
          "message": "Dynamic array access 'shared_field_g[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 153,
          "message": "Dynamic array access 'shared_field_b[shared_idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__public__hybrid__wgsl__normalize.wgsl",
      "hash": "357fe12f",
      "size": 1130,
      "lines": 39,
      "timestamp": "2025-08-08T20:24:46.112Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 36,
          "message": "Dynamic array access 'input[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 37,
          "message": "Dynamic array access 'output[idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__public__hybrid__wgsl__phaseOcclusion.wgsl",
      "hash": "9dc7f52b",
      "size": 2794,
      "lines": 60,
      "timestamp": "2025-08-08T20:24:46.142Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: expected `;`, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__public__hybrid__wgsl__phaseOcclusion.wgsl:5:51\n  │\n5 │ @group(0) @binding(3) var<uniform> params: struct {\n  │                                                   ^ expected `;`\n\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 23,
          "message": "Dynamic array access 'inputWave[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 24,
          "message": "Dynamic array access 'inputWave[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 26,
          "message": "Dynamic array access 'occlusion[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 29,
          "message": "Dynamic array access 'occlusion[idx + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 30,
          "message": "Dynamic array access 'occlusion[idx - 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 31,
          "message": "Dynamic array access 'occlusion[idx + w]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 32,
          "message": "Dynamic array access 'occlusion[idx - w]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 47,
          "message": "Dynamic array access 'outputWave[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 57,
          "message": "Dynamic array access 'outputWave[idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: expected `;`, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__public__hybrid__wgsl__phaseOcclusion.wgsl:5:51\n  │\n5 │ @group(0) @binding(3) var<uniform> params: struct {\n  │                                                   ^ expected `;`\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__public__hybrid__wgsl__propagation.wgsl",
      "hash": "f55802e7",
      "size": 19296,
      "lines": 502,
      "timestamp": "2025-08-08T20:24:46.179Z",
      "errors": [],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 493,
          "message": "Consider using 'const' instead of 'let' for 'view_angle'"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 282,
          "message": "Dynamic array access 'shared_transfer[local_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 381,
          "message": "Dynamic array access 'wavelengths[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 382,
          "message": "Dynamic array access 'spectral_weights[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 421,
          "message": "Dynamic array access 'wavelengths[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 422,
          "message": "Dynamic array access 'spectral_weights[i]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__public__hybrid__wgsl__topologicalOverlay.wgsl",
      "hash": "c544be29",
      "size": 9588,
      "lines": 311,
      "timestamp": "2025-08-08T20:24:46.241Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[1m: Entry point cs_update_charges at Compute is invalid\u001b[0m\n    \u001b[0m\u001b[36m┌─\u001b[0m .temp_frontend__public__hybrid__wgsl__topologicalOverlay.wgsl:309:5\n    \u001b[0m\u001b[36m│\u001b[0m\n\u001b[0m\u001b[36m309\u001b[0m \u001b[0m\u001b[36m│\u001b[0m     \u001b[0m\u001b[31mcharges[index]\u001b[0m = charge;\n    \u001b[0m\u001b[36m│\u001b[0m     \u001b[0m\u001b[31m^^^^^^^^^^^^^^\u001b[0m \u001b[0m\u001b[31mwriting to this location is not permitted\u001b[0m\n    \u001b[0m\u001b[36m│\u001b[0m\n    \u001b[0m\u001b[36m=\u001b[0m The pointer [96] doesn't relate to a valid destination for a store\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 158,
          "message": "Consider using 'const' instead of 'let' for 's'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 159,
          "message": "Consider using 'const' instead of 'let' for 'v'"
        },
        {
          "rule": "VEC3_STORAGE_ALIGNMENT",
          "line": 22,
          "message": "vec3 in storage buffer should be followed by padding or another vec3"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 61,
          "message": "Dynamic array access 'charges[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 83,
          "message": "Dynamic array access 'charges[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 106,
          "message": "Dynamic array access 'charges[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 126,
          "message": "Dynamic array access 'charges[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 268,
          "message": "Dynamic array access 'charges[index]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 290,
          "message": "Dynamic array access 'charges[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 309,
          "message": "Dynamic array access 'charges[index]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[1m: Entry point cs_update_charges at Compute is invalid\u001b[0m\n    \u001b[0m\u001b[36m┌─\u001b[0m .temp_frontend__public__hybrid__wgsl__topologicalOverlay.wgsl:309:5\n    \u001b[0m\u001b[36m│\u001b[0m\n\u001b[0m\u001b[36m309\u001b[0m \u001b[0m\u001b[36m│\u001b[0m     \u001b[0m\u001b[31mcharges[index]\u001b[0m = charge;\n    \u001b[0m\u001b[36m│\u001b[0m     \u001b[0m\u001b[31m^^^^^^^^^^^^^^\u001b[0m \u001b[0m\u001b[31mwriting to this location is not permitted\u001b[0m\n    \u001b[0m\u001b[36m│\u001b[0m\n    \u001b[0m\u001b[36m=\u001b[0m The pointer [96] doesn't relate to a valid destination for a store\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__public__hybrid__wgsl__transpose.wgsl",
      "hash": "4b0cdbfb",
      "size": 5290,
      "lines": 149,
      "timestamp": "2025-08-08T20:24:46.299Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 52,
          "message": "Dynamic array access 'tile[local_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 52,
          "message": "Dynamic array access 'input[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 55,
          "message": "Dynamic array access 'tile[local_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 70,
          "message": "Dynamic array access 'output[transposed_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 70,
          "message": "Dynamic array access 'tile[transposed_local]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'tile[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'input[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 111,
          "message": "Dynamic array access 'output[transposed_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 111,
          "message": "Dynamic array access 'tile[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 134,
          "message": "Dynamic array access 'input[idx1]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 135,
          "message": "Dynamic array access 'output[idx1]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 135,
          "message": "Dynamic array access 'input[idx2]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 136,
          "message": "Dynamic array access 'output[idx2]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__public__hybrid__wgsl__velocityField.wgsl",
      "hash": "b57ef2d0",
      "size": 14968,
      "lines": 422,
      "timestamp": "2025-08-08T20:24:46.338Z",
      "errors": [],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 336,
          "message": "Consider using 'const' instead of 'let' for 'momentum'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 397,
          "message": "Consider using 'const' instead of 'let' for 'value'"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 82,
          "message": "Dynamic array access 'shared_wavefield[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 93,
          "message": "Dynamic array access 'shared_wavefield[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 94,
          "message": "Dynamic array access 'shared_wavefield[idx - 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 95,
          "message": "Dynamic array access 'shared_wavefield[idx + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 96,
          "message": "Dynamic array access 'shared_wavefield[idx - 10u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'shared_wavefield[idx + 10u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 124,
          "message": "Dynamic array access 'spatial_freqs[packed_idx0]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 125,
          "message": "Dynamic array access 'spatial_freqs[packed_idx1]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 192,
          "message": "Dynamic array access 'phases[i / 4u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 228,
          "message": "Dynamic array access 'shared_wavefield[idx - 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 229,
          "message": "Dynamic array access 'shared_wavefield[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 230,
          "message": "Dynamic array access 'shared_wavefield[idx + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 234,
          "message": "Dynamic array access 'shared_wavefield[idx - 10u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 235,
          "message": "Dynamic array access 'shared_wavefield[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 236,
          "message": "Dynamic array access 'shared_wavefield[idx + 10u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 300,
          "message": "Dynamic array access 'particles[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 368,
          "message": "Dynamic array access 'particles[idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__public__hybrid__wgsl__wavefieldEncoder.wgsl",
      "hash": "da1516e3",
      "size": 9724,
      "lines": 278,
      "timestamp": "2025-08-08T20:24:46.407Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[1m: Global variable [0] 'wavefield_params' is invalid\u001b[0m\n   \u001b[0m\u001b[36m┌─\u001b[0m .temp_frontend__public__hybrid__wgsl__wavefieldEncoder.wgsl:47:23\n   \u001b[0m\u001b[36m│\u001b[0m\n\u001b[0m\u001b[36m47\u001b[0m \u001b[0m\u001b[36m│\u001b[0m @group(0) @binding(0) \u001b[0m\u001b[31mvar<uniform> wavefield_params: WavefieldParams;\u001b[0m\n   \u001b[0m\u001b[36m│\u001b[0m                       \u001b[0m\u001b[31m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[0m\u001b[31mnaga::ir::GlobalVariable [0]\u001b[0m\n   \u001b[0m\u001b[36m│\u001b[0m\n   \u001b[0m\u001b[36m=\u001b[0m Alignment requirements for address space Uniform are not met by [2]\n   \u001b[0m\u001b[36m=\u001b[0m The array stride 4 is not a multiple of the required alignment 16\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'shared_spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 98,
          "message": "Dynamic array access 'shared_phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 98,
          "message": "Dynamic array access 'phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 99,
          "message": "Dynamic array access 'shared_amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 99,
          "message": "Dynamic array access 'amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 112,
          "message": "Dynamic array access 'shared_spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 113,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 114,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 115,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 117,
          "message": "Dynamic array access 'shared_phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 118,
          "message": "Dynamic array access 'shared_phases[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 119,
          "message": "Dynamic array access 'shared_phases[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 120,
          "message": "Dynamic array access 'shared_phases[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 122,
          "message": "Dynamic array access 'shared_amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 123,
          "message": "Dynamic array access 'shared_amplitudes[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 124,
          "message": "Dynamic array access 'shared_amplitudes[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 125,
          "message": "Dynamic array access 'shared_amplitudes[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 174,
          "message": "Dynamic array access 'dispersion_factors[channel % 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 176,
          "message": "Dynamic array access 'phases[phase_idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[1m: Global variable [0] 'wavefield_params' is invalid\u001b[0m\n   \u001b[0m\u001b[36m┌─\u001b[0m .temp_frontend__public__hybrid__wgsl__wavefieldEncoder.wgsl:47:23\n   \u001b[0m\u001b[36m│\u001b[0m\n\u001b[0m\u001b[36m47\u001b[0m \u001b[0m\u001b[36m│\u001b[0m @group(0) @binding(0) \u001b[0m\u001b[31mvar<uniform> wavefield_params: WavefieldParams;\u001b[0m\n   \u001b[0m\u001b[36m│\u001b[0m                       \u001b[0m\u001b[31m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[0m\u001b[31mnaga::ir::GlobalVariable [0]\u001b[0m\n   \u001b[0m\u001b[36m│\u001b[0m\n   \u001b[0m\u001b[36m=\u001b[0m Alignment requirements for address space Uniform are not met by [2]\n   \u001b[0m\u001b[36m=\u001b[0m The array stride 4 is not a multiple of the required alignment 16\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__public__hybrid__wgsl__wavefieldEncoder_optimized.wgsl",
      "hash": "2fec729a",
      "size": 9748,
      "lines": 278,
      "timestamp": "2025-08-08T20:24:46.478Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'shared_spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 98,
          "message": "Dynamic array access 'shared_phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 98,
          "message": "Dynamic array access 'phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 99,
          "message": "Dynamic array access 'shared_amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 99,
          "message": "Dynamic array access 'amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 112,
          "message": "Dynamic array access 'shared_spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 113,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 114,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 115,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 117,
          "message": "Dynamic array access 'shared_phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 118,
          "message": "Dynamic array access 'shared_phases[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 119,
          "message": "Dynamic array access 'shared_phases[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 120,
          "message": "Dynamic array access 'shared_phases[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 122,
          "message": "Dynamic array access 'shared_amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 123,
          "message": "Dynamic array access 'shared_amplitudes[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 124,
          "message": "Dynamic array access 'shared_amplitudes[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 125,
          "message": "Dynamic array access 'shared_amplitudes[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 174,
          "message": "Dynamic array access 'dispersion_factors[channel % 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 176,
          "message": "Dynamic array access 'phases[phase_idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__shaders.bak__avatarShader.wgsl",
      "hash": "ade3ab85",
      "size": 5236,
      "lines": 133,
      "timestamp": "2025-08-08T20:24:46.541Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__shaders.bak__avatarShader.wgsl:1:1\n  │\n1 │ {\n  │ ^ expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file\n\n\n"
        }
      ],
      "warnings": [],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__shaders.bak__avatarShader.wgsl:1:1\n  │\n1 │ {\n  │ ^ expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__shaders.bak__bitReversal.wgsl",
      "hash": "c8648a10",
      "size": 1870,
      "lines": 60,
      "timestamp": "2025-08-08T20:24:46.608Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 55,
          "message": "Dynamic array access 'bit_reversal[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 58,
          "message": "Dynamic array access 'output[offset + j]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 58,
          "message": "Dynamic array access 'input[offset + i]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__shaders.bak__normalize.wgsl",
      "hash": "357fe12f",
      "size": 1130,
      "lines": 39,
      "timestamp": "2025-08-08T20:24:46.649Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 36,
          "message": "Dynamic array access 'input[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 37,
          "message": "Dynamic array access 'output[idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__shaders.bak__propagation.wgsl",
      "hash": "9daee8e2",
      "size": 19291,
      "lines": 502,
      "timestamp": "2025-08-08T20:24:46.681Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "[WARN  naga::valid::interface] \tUsage error for: GlobalVariable { name: Some(\"output_field\"), space: Handle, binding: Some(ResourceBinding { group: 1, binding: 1 }), ty: [6], init: None }\n[WARN  naga::valid::interface] \tAllowed usage: GlobalUse(WRITE | QUERY), requested: GlobalUse(READ | WRITE | QUERY)\n\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[1m: Entry point post_process at Compute is invalid\u001b[0m\n   \u001b[0m\u001b[36m┌─\u001b[0m .temp_frontend__shaders.bak__propagation.wgsl:51:23\n   \u001b[0m\u001b[36m│\u001b[0m\n\u001b[0m\u001b[36m51\u001b[0m \u001b[0m\u001b[36m│\u001b[0m @group(1) @binding(1) \u001b[0m\u001b[31mvar output_field: texture_storage_2d<rg32float, write>;\u001b[0m    // Complex field output\n   \u001b[0m\u001b[36m│\u001b[0m                       \u001b[0m\u001b[31m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[0m\u001b[31mnaga::ir::GlobalVariable [4]\u001b[0m\n   \u001b[0m\u001b[36m│\u001b[0m\n   \u001b[0m\u001b[36m=\u001b[0m Global variable [4] is used incorrectly as GlobalUse(READ | WRITE | QUERY)\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 493,
          "message": "Consider using 'const' instead of 'let' for 'view_angle'"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 282,
          "message": "Dynamic array access 'shared_transfer[local_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 381,
          "message": "Dynamic array access 'wavelengths[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 382,
          "message": "Dynamic array access 'spectral_weights[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 421,
          "message": "Dynamic array access 'wavelengths[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 422,
          "message": "Dynamic array access 'spectral_weights[i]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "[WARN  naga::valid::interface] \tUsage error for: GlobalVariable { name: Some(\"output_field\"), space: Handle, binding: Some(ResourceBinding { group: 1, binding: 1 }), ty: [6], init: None }\n[WARN  naga::valid::interface] \tAllowed usage: GlobalUse(WRITE | QUERY), requested: GlobalUse(READ | WRITE | QUERY)\n\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[1m: Entry point post_process at Compute is invalid\u001b[0m\n   \u001b[0m\u001b[36m┌─\u001b[0m .temp_frontend__shaders.bak__propagation.wgsl:51:23\n   \u001b[0m\u001b[36m│\u001b[0m\n\u001b[0m\u001b[36m51\u001b[0m \u001b[0m\u001b[36m│\u001b[0m @group(1) @binding(1) \u001b[0m\u001b[31mvar output_field: texture_storage_2d<rg32float, write>;\u001b[0m    // Complex field output\n   \u001b[0m\u001b[36m│\u001b[0m                       \u001b[0m\u001b[31m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[0m\u001b[31mnaga::ir::GlobalVariable [4]\u001b[0m\n   \u001b[0m\u001b[36m│\u001b[0m\n   \u001b[0m\u001b[36m=\u001b[0m Global variable [4] is used incorrectly as GlobalUse(READ | WRITE | QUERY)\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__shaders.bak__transpose.wgsl",
      "hash": "4b0cdbfb",
      "size": 5290,
      "lines": 149,
      "timestamp": "2025-08-08T20:24:46.750Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 52,
          "message": "Dynamic array access 'tile[local_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 52,
          "message": "Dynamic array access 'input[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 55,
          "message": "Dynamic array access 'tile[local_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 70,
          "message": "Dynamic array access 'output[transposed_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 70,
          "message": "Dynamic array access 'tile[transposed_local]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'tile[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'input[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 111,
          "message": "Dynamic array access 'output[transposed_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 111,
          "message": "Dynamic array access 'tile[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 134,
          "message": "Dynamic array access 'input[idx1]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 135,
          "message": "Dynamic array access 'output[idx1]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 135,
          "message": "Dynamic array access 'input[idx2]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 136,
          "message": "Dynamic array access 'output[idx2]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__shaders__avatarShader.wgsl",
      "hash": "ade3ab85",
      "size": 5236,
      "lines": 133,
      "timestamp": "2025-08-08T20:24:46.781Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__shaders__avatarShader.wgsl:1:1\n  │\n1 │ {\n  │ ^ expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file\n\n\n"
        }
      ],
      "warnings": [],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file, found \"{\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__shaders__avatarShader.wgsl:1:1\n  │\n1 │ {\n  │ ^ expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__shaders__bitReversal.wgsl",
      "hash": "c8648a10",
      "size": 1870,
      "lines": 60,
      "timestamp": "2025-08-08T20:24:46.816Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 55,
          "message": "Dynamic array access 'bit_reversal[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 58,
          "message": "Dynamic array access 'output[offset + j]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 58,
          "message": "Dynamic array access 'input[offset + i]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__shaders__butterflyStage.wgsl",
      "hash": "d94814fc",
      "size": 4833,
      "lines": 144,
      "timestamp": "2025-08-08T20:24:46.847Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 73,
          "message": "Dynamic array access 'twiddles[twiddle_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 76,
          "message": "Dynamic array access 'input[idx_a]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 77,
          "message": "Dynamic array access 'input[idx_b]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 83,
          "message": "Dynamic array access 'output[idx_a]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 84,
          "message": "Dynamic array access 'output[idx_b]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 120,
          "message": "Dynamic array access 'shared_data[local_idx * 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 120,
          "message": "Dynamic array access 'input[idx_a]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 121,
          "message": "Dynamic array access 'shared_data[local_idx * 2u + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 121,
          "message": "Dynamic array access 'input[idx_b]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 126,
          "message": "Dynamic array access 'shared_data[local_idx * 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 127,
          "message": "Dynamic array access 'shared_data[local_idx * 2u + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 130,
          "message": "Dynamic array access 'twiddles[twiddle_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 134,
          "message": "Dynamic array access 'output[idx_a]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 135,
          "message": "Dynamic array access 'output[idx_b]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__shaders__fftShift.wgsl",
      "hash": "ad2ba16f",
      "size": 1094,
      "lines": 46,
      "timestamp": "2025-08-08T20:24:46.874Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 34,
          "message": "Dynamic array access 'output[batch * N2 + j]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 34,
          "message": "Dynamic array access 'input[batch * N2 + i]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__shaders__lenticularInterlace.wgsl",
      "hash": "a1983a9e",
      "size": 15796,
      "lines": 446,
      "timestamp": "2025-08-08T20:24:46.902Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: invalid left-hand side of assignment\n    ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__shaders__lenticularInterlace.wgsl:300:5\n    │\n300 │     color.rgb = apply_calibration_fast(color.rgb);\n    │     ^^^^^^^^^ cannot assign to this expression\n    │\n    = note: WGSL does not support assignments to swizzles\n    = note: consider assigning each component individually\n\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 235,
          "message": "Consider using 'const' instead of 'let' for 'subpixel_width'"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: invalid left-hand side of assignment\n    ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__shaders__lenticularInterlace.wgsl:300:5\n    │\n300 │     color.rgb = apply_calibration_fast(color.rgb);\n    │     ^^^^^^^^^ cannot assign to this expression\n    │\n    = note: WGSL does not support assignments to swizzles\n    = note: consider assigning each component individually\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__shaders__multiViewSynthesis.wgsl",
      "hash": "695a491b",
      "size": 16531,
      "lines": 410,
      "timestamp": "2025-08-08T20:24:46.958Z",
      "errors": [
        {
          "rule": "WORKGROUP_SIZE_LIMITS",
          "line": 338,
          "message": "Total invocations (512) exceeds device limit (256)"
        },
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: invalid field accessor `aberration_strength`\n    ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__shaders__multiViewSynthesis.wgsl:196:52\n    │\n196 │     let aberration_r = view_offset * render_params.aberration_strength * \n    │                                                    ^^^^^^^^^^^^^^^^^^^ invalid accessor\n\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 186,
          "message": "Consider using 'const' instead of 'let' for 'phase_tilt_y'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 254,
          "message": "Consider using 'const' instead of 'let' for 'a'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 255,
          "message": "Consider using 'const' instead of 'let' for 'b'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 256,
          "message": "Consider using 'const' instead of 'let' for 'c'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 257,
          "message": "Consider using 'const' instead of 'let' for 'd'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 258,
          "message": "Consider using 'const' instead of 'let' for 'e'"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 166,
          "message": "Dynamic array access 'shared_field_r[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 167,
          "message": "Dynamic array access 'shared_field_g[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 168,
          "message": "Dynamic array access 'shared_field_b[shared_idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: invalid field accessor `aberration_strength`\n    ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__shaders__multiViewSynthesis.wgsl:196:52\n    │\n196 │     let aberration_r = view_offset * render_params.aberration_strength * \n    │                                                    ^^^^^^^^^^^^^^^^^^^ invalid accessor\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__shaders__normalize.wgsl",
      "hash": "357fe12f",
      "size": 1130,
      "lines": 39,
      "timestamp": "2025-08-08T20:24:47.018Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 36,
          "message": "Dynamic array access 'input[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 37,
          "message": "Dynamic array access 'output[idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__shaders__propagation.wgsl",
      "hash": "9daee8e2",
      "size": 19291,
      "lines": 502,
      "timestamp": "2025-08-08T20:24:47.047Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "[WARN  naga::valid::interface] \tUsage error for: GlobalVariable { name: Some(\"output_field\"), space: Handle, binding: Some(ResourceBinding { group: 1, binding: 1 }), ty: [6], init: None }\n[WARN  naga::valid::interface] \tAllowed usage: GlobalUse(WRITE | QUERY), requested: GlobalUse(READ | WRITE | QUERY)\n\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[1m: Entry point post_process at Compute is invalid\u001b[0m\n   \u001b[0m\u001b[36m┌─\u001b[0m .temp_frontend__shaders__propagation.wgsl:51:23\n   \u001b[0m\u001b[36m│\u001b[0m\n\u001b[0m\u001b[36m51\u001b[0m \u001b[0m\u001b[36m│\u001b[0m @group(1) @binding(1) \u001b[0m\u001b[31mvar output_field: texture_storage_2d<rg32float, write>;\u001b[0m    // Complex field output\n   \u001b[0m\u001b[36m│\u001b[0m                       \u001b[0m\u001b[31m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[0m\u001b[31mnaga::ir::GlobalVariable [4]\u001b[0m\n   \u001b[0m\u001b[36m│\u001b[0m\n   \u001b[0m\u001b[36m=\u001b[0m Global variable [4] is used incorrectly as GlobalUse(READ | WRITE | QUERY)\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 493,
          "message": "Consider using 'const' instead of 'let' for 'view_angle'"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 282,
          "message": "Dynamic array access 'shared_transfer[local_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 381,
          "message": "Dynamic array access 'wavelengths[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 382,
          "message": "Dynamic array access 'spectral_weights[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 421,
          "message": "Dynamic array access 'wavelengths[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 422,
          "message": "Dynamic array access 'spectral_weights[i]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "[WARN  naga::valid::interface] \tUsage error for: GlobalVariable { name: Some(\"output_field\"), space: Handle, binding: Some(ResourceBinding { group: 1, binding: 1 }), ty: [6], init: None }\n[WARN  naga::valid::interface] \tAllowed usage: GlobalUse(WRITE | QUERY), requested: GlobalUse(READ | WRITE | QUERY)\n\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[1m: Entry point post_process at Compute is invalid\u001b[0m\n   \u001b[0m\u001b[36m┌─\u001b[0m .temp_frontend__shaders__propagation.wgsl:51:23\n   \u001b[0m\u001b[36m│\u001b[0m\n\u001b[0m\u001b[36m51\u001b[0m \u001b[0m\u001b[36m│\u001b[0m @group(1) @binding(1) \u001b[0m\u001b[31mvar output_field: texture_storage_2d<rg32float, write>;\u001b[0m    // Complex field output\n   \u001b[0m\u001b[36m│\u001b[0m                       \u001b[0m\u001b[31m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[0m\u001b[31mnaga::ir::GlobalVariable [4]\u001b[0m\n   \u001b[0m\u001b[36m│\u001b[0m\n   \u001b[0m\u001b[36m=\u001b[0m Global variable [4] is used incorrectly as GlobalUse(READ | WRITE | QUERY)\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__shaders__transpose.wgsl",
      "hash": "4b0cdbfb",
      "size": 5290,
      "lines": 149,
      "timestamp": "2025-08-08T20:24:47.116Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 52,
          "message": "Dynamic array access 'tile[local_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 52,
          "message": "Dynamic array access 'input[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 55,
          "message": "Dynamic array access 'tile[local_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 70,
          "message": "Dynamic array access 'output[transposed_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 70,
          "message": "Dynamic array access 'tile[transposed_local]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'tile[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'input[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 111,
          "message": "Dynamic array access 'output[transposed_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 111,
          "message": "Dynamic array access 'tile[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 134,
          "message": "Dynamic array access 'input[idx1]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 135,
          "message": "Dynamic array access 'output[idx1]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 135,
          "message": "Dynamic array access 'input[idx2]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 136,
          "message": "Dynamic array access 'output[idx2]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__shaders__velocityField.wgsl",
      "hash": "b3d3dbd5",
      "size": 14696,
      "lines": 416,
      "timestamp": "2025-08-08T20:24:47.153Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: unknown attribute: `group`\n    ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__shaders__velocityField.wgsl:284:21\n    │\n284 │                    @group(0) @binding(5) var<storage, read_write> particles: array<vec4<f32>>) {\n    │                     ^^^^^ unknown attribute\n\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 329,
          "message": "Consider using 'const' instead of 'let' for 'momentum'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 391,
          "message": "Consider using 'const' instead of 'let' for 'value'"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 80,
          "message": "Dynamic array access 'shared_wavefield[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 91,
          "message": "Dynamic array access 'shared_wavefield[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 92,
          "message": "Dynamic array access 'shared_wavefield[idx - 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 93,
          "message": "Dynamic array access 'shared_wavefield[idx + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 94,
          "message": "Dynamic array access 'shared_wavefield[idx - 10u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 95,
          "message": "Dynamic array access 'shared_wavefield[idx + 10u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 119,
          "message": "Dynamic array access 'spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 120,
          "message": "Dynamic array access 'spatial_freqs[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 121,
          "message": "Dynamic array access 'spatial_freqs[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 122,
          "message": "Dynamic array access 'spatial_freqs[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 184,
          "message": "Dynamic array access 'phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 220,
          "message": "Dynamic array access 'shared_wavefield[idx - 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 221,
          "message": "Dynamic array access 'shared_wavefield[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 222,
          "message": "Dynamic array access 'shared_wavefield[idx + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 226,
          "message": "Dynamic array access 'shared_wavefield[idx - 10u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 227,
          "message": "Dynamic array access 'shared_wavefield[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 228,
          "message": "Dynamic array access 'shared_wavefield[idx + 10u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 293,
          "message": "Dynamic array access 'particles[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 361,
          "message": "Dynamic array access 'particles[idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: unknown attribute: `group`\n    ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_frontend__shaders__velocityField.wgsl:284:21\n    │\n284 │                    @group(0) @binding(5) var<storage, read_write> particles: array<vec4<f32>>) {\n    │                     ^^^^^ unknown attribute\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__shaders__wavefieldEncoder.wgsl",
      "hash": "da1516e3",
      "size": 9724,
      "lines": 278,
      "timestamp": "2025-08-08T20:24:47.210Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[1m: Global variable [0] 'wavefield_params' is invalid\u001b[0m\n   \u001b[0m\u001b[36m┌─\u001b[0m .temp_frontend__shaders__wavefieldEncoder.wgsl:47:23\n   \u001b[0m\u001b[36m│\u001b[0m\n\u001b[0m\u001b[36m47\u001b[0m \u001b[0m\u001b[36m│\u001b[0m @group(0) @binding(0) \u001b[0m\u001b[31mvar<uniform> wavefield_params: WavefieldParams;\u001b[0m\n   \u001b[0m\u001b[36m│\u001b[0m                       \u001b[0m\u001b[31m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[0m\u001b[31mnaga::ir::GlobalVariable [0]\u001b[0m\n   \u001b[0m\u001b[36m│\u001b[0m\n   \u001b[0m\u001b[36m=\u001b[0m Alignment requirements for address space Uniform are not met by [2]\n   \u001b[0m\u001b[36m=\u001b[0m The array stride 4 is not a multiple of the required alignment 16\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'shared_spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 98,
          "message": "Dynamic array access 'shared_phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 98,
          "message": "Dynamic array access 'phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 99,
          "message": "Dynamic array access 'shared_amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 99,
          "message": "Dynamic array access 'amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 112,
          "message": "Dynamic array access 'shared_spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 113,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 114,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 115,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 117,
          "message": "Dynamic array access 'shared_phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 118,
          "message": "Dynamic array access 'shared_phases[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 119,
          "message": "Dynamic array access 'shared_phases[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 120,
          "message": "Dynamic array access 'shared_phases[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 122,
          "message": "Dynamic array access 'shared_amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 123,
          "message": "Dynamic array access 'shared_amplitudes[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 124,
          "message": "Dynamic array access 'shared_amplitudes[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 125,
          "message": "Dynamic array access 'shared_amplitudes[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 174,
          "message": "Dynamic array access 'dispersion_factors[channel % 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 176,
          "message": "Dynamic array access 'phases[phase_idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[1m: Global variable [0] 'wavefield_params' is invalid\u001b[0m\n   \u001b[0m\u001b[36m┌─\u001b[0m .temp_frontend__shaders__wavefieldEncoder.wgsl:47:23\n   \u001b[0m\u001b[36m│\u001b[0m\n\u001b[0m\u001b[36m47\u001b[0m \u001b[0m\u001b[36m│\u001b[0m @group(0) @binding(0) \u001b[0m\u001b[31mvar<uniform> wavefield_params: WavefieldParams;\u001b[0m\n   \u001b[0m\u001b[36m│\u001b[0m                       \u001b[0m\u001b[31m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[0m\u001b[31mnaga::ir::GlobalVariable [0]\u001b[0m\n   \u001b[0m\u001b[36m│\u001b[0m\n   \u001b[0m\u001b[36m=\u001b[0m Alignment requirements for address space Uniform are not met by [2]\n   \u001b[0m\u001b[36m=\u001b[0m The array stride 4 is not a multiple of the required alignment 16\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\frontend__shaders__wavefieldEncoder_optimized.wgsl",
      "hash": "2fec729a",
      "size": 9748,
      "lines": 278,
      "timestamp": "2025-08-08T20:24:47.269Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'shared_spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 98,
          "message": "Dynamic array access 'shared_phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 98,
          "message": "Dynamic array access 'phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 99,
          "message": "Dynamic array access 'shared_amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 99,
          "message": "Dynamic array access 'amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 112,
          "message": "Dynamic array access 'shared_spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 113,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 114,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 115,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 117,
          "message": "Dynamic array access 'shared_phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 118,
          "message": "Dynamic array access 'shared_phases[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 119,
          "message": "Dynamic array access 'shared_phases[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 120,
          "message": "Dynamic array access 'shared_phases[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 122,
          "message": "Dynamic array access 'shared_amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 123,
          "message": "Dynamic array access 'shared_amplitudes[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 124,
          "message": "Dynamic array access 'shared_amplitudes[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 125,
          "message": "Dynamic array access 'shared_amplitudes[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 174,
          "message": "Dynamic array access 'dispersion_factors[channel % 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 176,
          "message": "Dynamic array access 'phases[phase_idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\tori_ui_svelte__src__shaders__avatarShader.wgsl",
      "hash": "ff86314b",
      "size": 663,
      "lines": 27,
      "timestamp": "2025-08-08T20:24:47.330Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file, found \"[\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_tori_ui_svelte__src__shaders__avatarShader.wgsl:3:1\n  │\n3 │ [[block]] struct Uniforms {\n  │ ^ expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file\n\n\n"
        }
      ],
      "warnings": [],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file, found \"[\"\n  ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp_tori_ui_svelte__src__shaders__avatarShader.wgsl:3:1\n  │\n3 │ [[block]] struct Uniforms {\n  │ ^ expected global item (`struct`, `const`, `var`, `alias`, `fn`, `diagnostic`, `enable`, `requires`, `;`) or the end of the file\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\_TRASH_2025__.venv__src__penrose-engine-rs__frontend__lib__webgpu__shaders__fft__bitReversal.wgsl",
      "hash": "843a90d1",
      "size": 3574,
      "lines": 100,
      "timestamp": "2025-08-08T20:24:47.357Z",
      "errors": [
        {
          "rule": "NO_DUPLICATE_BINDINGS",
          "line": 26,
          "message": "Duplicate binding: @group(0) @binding(2)"
        },
        {
          "rule": "NO_DUPLICATE_BINDINGS",
          "line": 27,
          "message": "Duplicate binding: @group(0) @binding(3)"
        }
      ],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 48,
          "message": "Dynamic array access 'bit_reversal[element_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 52,
          "message": "Dynamic array access 'output[batch_offset + reversed_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 52,
          "message": "Dynamic array access 'input[batch_offset + element_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 78,
          "message": "Dynamic array access 'tile[local_id.x]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 78,
          "message": "Dynamic array access 'input[batch_offset + element_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 79,
          "message": "Dynamic array access 'reversed_tile[local_id.x]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 79,
          "message": "Dynamic array access 'bit_reversal[element_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 89,
          "message": "Dynamic array access 'reversed_tile[local_id.x]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 91,
          "message": "Dynamic array access 'output[batch_offset + reversed_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 91,
          "message": "Dynamic array access 'tile[local_id.x]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\_TRASH_2025__.venv__src__penrose-engine-rs__frontend__lib__webgpu__shaders__fft__butterflyStage.wgsl",
      "hash": "d1b20ca0",
      "size": 4836,
      "lines": 144,
      "timestamp": "2025-08-08T20:24:47.410Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 73,
          "message": "Dynamic array access 'twiddles[twiddle_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 76,
          "message": "Dynamic array access 'input[idx_a]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 77,
          "message": "Dynamic array access 'input[idx_b]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 83,
          "message": "Dynamic array access 'output[idx_a]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 84,
          "message": "Dynamic array access 'output[idx_b]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 120,
          "message": "Dynamic array access 'shared_data[local_idx * 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 120,
          "message": "Dynamic array access 'input[idx_a]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 121,
          "message": "Dynamic array access 'shared_data[local_idx * 2u + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 121,
          "message": "Dynamic array access 'input[idx_b]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 126,
          "message": "Dynamic array access 'shared_data[local_idx * 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 127,
          "message": "Dynamic array access 'shared_data[local_idx * 2u + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 130,
          "message": "Dynamic array access 'twiddles[twiddle_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 134,
          "message": "Dynamic array access 'output[idx_a]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 135,
          "message": "Dynamic array access 'output[idx_b]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\_TRASH_2025__.venv__src__penrose-engine-rs__frontend__lib__webgpu__shaders__fft__fftShift.wgsl",
      "hash": "1c303989",
      "size": 4496,
      "lines": 141,
      "timestamp": "2025-08-08T20:24:47.466Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: entry point cannot be called\n    ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp__TRASH_2025__.venv__src__penrose-engine-rs__frontend__lib__webgpu__shaders__fft__fftShift.wgsl:133:5\n    │\n133 │     main(global_id);\n    │     ^^^^ entry point cannot be called\n\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 43,
          "message": "Dynamic array access 'output[batch_offset + shifted_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 43,
          "message": "Dynamic array access 'input[batch_offset + element_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 63,
          "message": "Dynamic array access 'output[batch_offset + shifted_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 63,
          "message": "Dynamic array access 'input[batch_offset + element_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 101,
          "message": "Dynamic array access 'output[batch_offset + shifted_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 101,
          "message": "Dynamic array access 'input[batch_offset + element_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 126,
          "message": "Dynamic array access 'output[batch_offset + shifted_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 126,
          "message": "Dynamic array access 'input[batch_offset + element_idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: entry point cannot be called\n    ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp__TRASH_2025__.venv__src__penrose-engine-rs__frontend__lib__webgpu__shaders__fft__fftShift.wgsl:133:5\n    │\n133 │     main(global_id);\n    │     ^^^^ entry point cannot be called\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\_TRASH_2025__.venv__src__penrose-engine-rs__frontend__lib__webgpu__shaders__fft__normalize.wgsl",
      "hash": "a52bf86f",
      "size": 4555,
      "lines": 130,
      "timestamp": "2025-08-08T20:24:47.527Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[1m: Entry point normalize_and_magnitude at Compute is invalid\u001b[0m\n    \u001b[0m\u001b[36m┌─\u001b[0m .temp__TRASH_2025__.venv__src__penrose-engine-rs__frontend__lib__webgpu__shaders__fft__normalize.wgsl:118:5\n    \u001b[0m\u001b[36m│\u001b[0m\n\u001b[0m\u001b[36m118\u001b[0m \u001b[0m\u001b[36m│\u001b[0m     \u001b[0m\u001b[31moutput[idx]\u001b[0m = \u001b[0m\u001b[31mvec4<f32>(normalized, magnitude, 0.0)\u001b[0m;\n    \u001b[0m\u001b[36m│\u001b[0m     \u001b[0m\u001b[31m^^^^^^^^^^^\u001b[0m   \u001b[0m\u001b[31m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[0m\u001b[31mnaga::ir::Expression [21]\u001b[0m\n    \u001b[0m\u001b[36m│\u001b[0m     \u001b[0m\u001b[31m│\u001b[0m              \n    \u001b[0m\u001b[36m│\u001b[0m     \u001b[0m\u001b[31mnaga::ir::Expression [19]\u001b[0m\n    \u001b[0m\u001b[36m│\u001b[0m\n    \u001b[0m\u001b[36m=\u001b[0m The type of [21] doesn't match the type stored in [19]\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 62,
          "message": "Dynamic array access 'output[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 62,
          "message": "Dynamic array access 'input[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 95,
          "message": "Dynamic array access 'output[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 95,
          "message": "Dynamic array access 'input[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 109,
          "message": "Dynamic array access 'input[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 118,
          "message": "Dynamic array access 'output[idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[1m: Entry point normalize_and_magnitude at Compute is invalid\u001b[0m\n    \u001b[0m\u001b[36m┌─\u001b[0m .temp__TRASH_2025__.venv__src__penrose-engine-rs__frontend__lib__webgpu__shaders__fft__normalize.wgsl:118:5\n    \u001b[0m\u001b[36m│\u001b[0m\n\u001b[0m\u001b[36m118\u001b[0m \u001b[0m\u001b[36m│\u001b[0m     \u001b[0m\u001b[31moutput[idx]\u001b[0m = \u001b[0m\u001b[31mvec4<f32>(normalized, magnitude, 0.0)\u001b[0m;\n    \u001b[0m\u001b[36m│\u001b[0m     \u001b[0m\u001b[31m^^^^^^^^^^^\u001b[0m   \u001b[0m\u001b[31m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[0m\u001b[31mnaga::ir::Expression [21]\u001b[0m\n    \u001b[0m\u001b[36m│\u001b[0m     \u001b[0m\u001b[31m│\u001b[0m              \n    \u001b[0m\u001b[36m│\u001b[0m     \u001b[0m\u001b[31mnaga::ir::Expression [19]\u001b[0m\n    \u001b[0m\u001b[36m│\u001b[0m\n    \u001b[0m\u001b[36m=\u001b[0m The type of [21] doesn't match the type stored in [19]\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\_TRASH_2025__.venv__src__penrose-engine-rs__frontend__lib__webgpu__shaders__fft__transpose.wgsl",
      "hash": "4b0cdbfb",
      "size": 5290,
      "lines": 149,
      "timestamp": "2025-08-08T20:24:47.590Z",
      "errors": [],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 52,
          "message": "Dynamic array access 'tile[local_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 52,
          "message": "Dynamic array access 'input[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 55,
          "message": "Dynamic array access 'tile[local_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 70,
          "message": "Dynamic array access 'output[transposed_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 70,
          "message": "Dynamic array access 'tile[transposed_local]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'tile[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'input[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 111,
          "message": "Dynamic array access 'output[transposed_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 111,
          "message": "Dynamic array access 'tile[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 134,
          "message": "Dynamic array access 'input[idx1]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 135,
          "message": "Dynamic array access 'output[idx1]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 135,
          "message": "Dynamic array access 'input[idx2]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 136,
          "message": "Dynamic array access 'output[idx2]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": true,
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\_TRASH_2025__.venv__src__penrose-engine-rs__frontend__shaders__lenticularInterlace.wgsl",
      "hash": "179ee169",
      "size": 16241,
      "lines": 446,
      "timestamp": "2025-08-08T20:24:47.629Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: invalid left-hand side of assignment\n    ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp__TRASH_2025__.venv__src__penrose-engine-rs__frontend__shaders__lenticularInterlace.wgsl:300:5\n    │\n300 │     color.rgb = apply_calibration_fast(color.rgb);\n    │     ^^^^^^^^^ cannot assign to this expression\n    │\n    = note: WGSL does not support assignments to swizzles\n    = note: consider assigning each component individually\n\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 235,
          "message": "Consider using 'const' instead of 'let' for 'subpixel_width'"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: invalid left-hand side of assignment\n    ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp__TRASH_2025__.venv__src__penrose-engine-rs__frontend__shaders__lenticularInterlace.wgsl:300:5\n    │\n300 │     color.rgb = apply_calibration_fast(color.rgb);\n    │     ^^^^^^^^^ cannot assign to this expression\n    │\n    = note: WGSL does not support assignments to swizzles\n    = note: consider assigning each component individually\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\_TRASH_2025__.venv__src__penrose-engine-rs__frontend__shaders__multiViewSynthesis.wgsl",
      "hash": "4d0053b3",
      "size": 16427,
      "lines": 394,
      "timestamp": "2025-08-08T20:24:47.692Z",
      "errors": [
        {
          "rule": "WORKGROUP_SIZE_LIMITS",
          "line": 322,
          "message": "Total invocations (512) exceeds device limit (256)"
        },
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: invalid field accessor `aberration_strength`\n    ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp__TRASH_2025__.venv__src__penrose-engine-rs__frontend__shaders__multiViewSynthesis.wgsl:180:52\n    │\n180 │     let aberration_r = view_offset * render_params.aberration_strength * \n    │                                                    ^^^^^^^^^^^^^^^^^^^ invalid accessor\n\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 170,
          "message": "Consider using 'const' instead of 'let' for 'phase_tilt_y'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 238,
          "message": "Consider using 'const' instead of 'let' for 'a'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 239,
          "message": "Consider using 'const' instead of 'let' for 'b'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 240,
          "message": "Consider using 'const' instead of 'let' for 'c'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 241,
          "message": "Consider using 'const' instead of 'let' for 'd'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 242,
          "message": "Consider using 'const' instead of 'let' for 'e'"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 151,
          "message": "Dynamic array access 'shared_field_r[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 152,
          "message": "Dynamic array access 'shared_field_g[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 153,
          "message": "Dynamic array access 'shared_field_b[shared_idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: invalid field accessor `aberration_strength`\n    ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp__TRASH_2025__.venv__src__penrose-engine-rs__frontend__shaders__multiViewSynthesis.wgsl:180:52\n    │\n180 │     let aberration_r = view_offset * render_params.aberration_strength * \n    │                                                    ^^^^^^^^^^^^^^^^^^^ invalid accessor\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\_TRASH_2025__.venv__src__penrose-engine-rs__frontend__shaders__propagation.wgsl",
      "hash": "8a3137a0",
      "size": 19860,
      "lines": 501,
      "timestamp": "2025-08-08T20:24:47.757Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: name `filter` is a reserved keyword\n    ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp__TRASH_2025__.venv__src__penrose-engine-rs__frontend__shaders__propagation.wgsl:268:13\n    │\n268 │         let filter = raised_cosine_filter(freq);\n    │             ^^^^^^ definition of `filter`\n\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 492,
          "message": "Consider using 'const' instead of 'let' for 'view_angle'"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 282,
          "message": "Dynamic array access 'shared_transfer[local_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 381,
          "message": "Dynamic array access 'wavelengths[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 382,
          "message": "Dynamic array access 'spectral_weights[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 421,
          "message": "Dynamic array access 'wavelengths[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 422,
          "message": "Dynamic array access 'spectral_weights[i]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: name `filter` is a reserved keyword\n    ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp__TRASH_2025__.venv__src__penrose-engine-rs__frontend__shaders__propagation.wgsl:268:13\n    │\n268 │         let filter = raised_cosine_filter(freq);\n    │             ^^^^^^ definition of `filter`\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\_TRASH_2025__.venv__src__penrose-engine-rs__frontend__shaders__velocityField.wgsl",
      "hash": "bf6e53df",
      "size": 15111,
      "lines": 416,
      "timestamp": "2025-08-08T20:24:47.833Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "Could not parse WGSL:\nerror: unknown attribute: `group`\n    ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp__TRASH_2025__.venv__src__penrose-engine-rs__frontend__shaders__velocityField.wgsl:284:21\n    │\n284 │                    @group(0) @binding(5) var<storage, read_write> particles: array<vec4<f32>>) {\n    │                     ^^^^^ unknown attribute\n\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "PREFER_CONST",
          "line": 329,
          "message": "Consider using 'const' instead of 'let' for 'momentum'"
        },
        {
          "rule": "PREFER_CONST",
          "line": 391,
          "message": "Consider using 'const' instead of 'let' for 'value'"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 80,
          "message": "Dynamic array access 'shared_wavefield[shared_idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 91,
          "message": "Dynamic array access 'shared_wavefield[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 92,
          "message": "Dynamic array access 'shared_wavefield[idx - 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 93,
          "message": "Dynamic array access 'shared_wavefield[idx + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 94,
          "message": "Dynamic array access 'shared_wavefield[idx - 10u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 95,
          "message": "Dynamic array access 'shared_wavefield[idx + 10u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 119,
          "message": "Dynamic array access 'spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 120,
          "message": "Dynamic array access 'spatial_freqs[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 121,
          "message": "Dynamic array access 'spatial_freqs[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 122,
          "message": "Dynamic array access 'spatial_freqs[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 184,
          "message": "Dynamic array access 'phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 220,
          "message": "Dynamic array access 'shared_wavefield[idx - 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 221,
          "message": "Dynamic array access 'shared_wavefield[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 222,
          "message": "Dynamic array access 'shared_wavefield[idx + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 226,
          "message": "Dynamic array access 'shared_wavefield[idx - 10u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 227,
          "message": "Dynamic array access 'shared_wavefield[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 228,
          "message": "Dynamic array access 'shared_wavefield[idx + 10u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 293,
          "message": "Dynamic array access 'particles[idx]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 361,
          "message": "Dynamic array access 'particles[idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "Could not parse WGSL:\nerror: unknown attribute: `group`\n    ┌─ C:\\Users\\jason\\Desktop\\tori\\kha\\frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\.temp__TRASH_2025__.venv__src__penrose-engine-rs__frontend__shaders__velocityField.wgsl:284:21\n    │\n284 │                    @group(0) @binding(5) var<storage, read_write> particles: array<vec4<f32>>) {\n    │                     ^^^^^ unknown attribute\n\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    },
    {
      "file": "frontend\\shaders.bak\\duplicates\\2025-08-08T15-54-52-296Z\\_TRASH_2025__.venv__src__penrose-engine-rs__frontend__shaders__wavefieldEncoder.wgsl",
      "hash": "cf9964ad",
      "size": 10001,
      "lines": 278,
      "timestamp": "2025-08-08T20:24:47.911Z",
      "errors": [
        {
          "rule": "NAGA_VALIDATION",
          "message": "\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[1m: Global variable [0] 'wavefield_params' is invalid\u001b[0m\n   \u001b[0m\u001b[36m┌─\u001b[0m .temp__TRASH_2025__.venv__src__penrose-engine-rs__frontend__shaders__wavefieldEncoder.wgsl:47:23\n   \u001b[0m\u001b[36m│\u001b[0m\n\u001b[0m\u001b[36m47\u001b[0m \u001b[0m\u001b[36m│\u001b[0m @group(0) @binding(0) \u001b[0m\u001b[31mvar<uniform> wavefield_params: WavefieldParams;\u001b[0m\n   \u001b[0m\u001b[36m│\u001b[0m                       \u001b[0m\u001b[31m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[0m\u001b[31mnaga::ir::GlobalVariable [0]\u001b[0m\n   \u001b[0m\u001b[36m│\u001b[0m\n   \u001b[0m\u001b[36m=\u001b[0m Alignment requirements for address space Uniform are not met by [2]\n   \u001b[0m\u001b[36m=\u001b[0m The array stride 4 is not a multiple of the required alignment 16\n\n"
        }
      ],
      "warnings": [
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'shared_spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 97,
          "message": "Dynamic array access 'spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 98,
          "message": "Dynamic array access 'shared_phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 98,
          "message": "Dynamic array access 'phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 99,
          "message": "Dynamic array access 'shared_amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 99,
          "message": "Dynamic array access 'amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 112,
          "message": "Dynamic array access 'shared_spatial_freqs[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 113,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 114,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 115,
          "message": "Dynamic array access 'shared_spatial_freqs[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 117,
          "message": "Dynamic array access 'shared_phases[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 118,
          "message": "Dynamic array access 'shared_phases[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 119,
          "message": "Dynamic array access 'shared_phases[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 120,
          "message": "Dynamic array access 'shared_phases[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 122,
          "message": "Dynamic array access 'shared_amplitudes[i]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 123,
          "message": "Dynamic array access 'shared_amplitudes[i + 1u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 124,
          "message": "Dynamic array access 'shared_amplitudes[i + 2u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 125,
          "message": "Dynamic array access 'shared_amplitudes[i + 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 174,
          "message": "Dynamic array access 'dispersion_factors[channel % 3u]' without apparent bounds checking"
        },
        {
          "rule": "DYNAMIC_INDEXING_BOUNDS",
          "line": 176,
          "message": "Dynamic array access 'phases[phase_idx]' without apparent bounds checking"
        }
      ],
      "fixes": [],
      "backends": {
        "naga": {
          "success": false,
          "error": "\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[1m: Global variable [0] 'wavefield_params' is invalid\u001b[0m\n   \u001b[0m\u001b[36m┌─\u001b[0m .temp__TRASH_2025__.venv__src__penrose-engine-rs__frontend__shaders__wavefieldEncoder.wgsl:47:23\n   \u001b[0m\u001b[36m│\u001b[0m\n\u001b[0m\u001b[36m47\u001b[0m \u001b[0m\u001b[36m│\u001b[0m @group(0) @binding(0) \u001b[0m\u001b[31mvar<uniform> wavefield_params: WavefieldParams;\u001b[0m\n   \u001b[0m\u001b[36m│\u001b[0m                       \u001b[0m\u001b[31m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[0m\u001b[31mnaga::ir::GlobalVariable [0]\u001b[0m\n   \u001b[0m\u001b[36m│\u001b[0m\n   \u001b[0m\u001b[36m=\u001b[0m Alignment requirements for address space Uniform are not met by [2]\n   \u001b[0m\u001b[36m=\u001b[0m The array stride 4 is not a multiple of the required alignment 16\n\n",
          "warnings": []
        },
        "msl": {
          "success": true,
          "skipped": true
        },
        "hlsl": {
          "success": true,
          "skipped": true
        },
        "spirv": {
          "success": true,
          "skipped": true
        }
      }
    }
  ]
}