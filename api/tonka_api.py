"""
TONKA API Integration for Pigpen/Prajna
Provides code generation endpoints for the chat interface
"""

from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import Optional, Dict, Any, List
import sys
import logging
from pathlib import Path

# Add TONKA to path
tonka_path = Path(__file__).parent.parent / "mcp_server_arch" / "solidownload" / "mcp-server-architecture" / "src" / "servers"
sys.path.insert(0, str(tonka_path))

# Import TONKA
try:
    from tonka_minimal import TonkaMinimal
    TONKA_AVAILABLE = True
except ImportError:
    TONKA_AVAILABLE = False
    TonkaMinimal = None

# Set up logging
logger = logging.getLogger(__name__)

# Create router
router = APIRouter(prefix="/api/tonka", tags=["tonka"])

# Global TONKA instance
tonka_instance = None

# Request/Response models
class TonkaGenerateRequest(BaseModel):
    task: str
    language: str = "python"
    style: str = "simple"
    persona: Optional[Dict[str, Any]] = None

class TonkaResponse(BaseModel):
    success: bool
    code: Optional[str] = None
    error: Optional[str] = None
    source: Optional[str] = None
    language: Optional[str] = None
    confidence: Optional[float] = None

class TonkaProjectRequest(BaseModel):
    project_type: str  # api, cli, basic
    name: str
    features: List[str] = []

class TonkaProjectResponse(BaseModel):
    success: bool
    files: Optional[Dict[str, str]] = None
    error: Optional[str] = None
    file_count: Optional[int] = None

def get_tonka():
    """Get or create TONKA instance"""
    global tonka_instance
    
    if not TONKA_AVAILABLE:
        raise HTTPException(status_code=503, detail="TONKA not available")
    
    if tonka_instance is None:
        logger.info("Initializing TONKA...")
        tonka_instance = TonkaMinimal()
        logger.info(f"TONKA loaded with {tonka_instance.total_concepts} concepts")
    
    return tonka_instance

@router.get("/health")
async def tonka_health():
    """Check TONKA health status"""
    if not TONKA_AVAILABLE:
        return {
            "status": "unavailable",
            "error": "TONKA module not found"
        }
    
    try:
        tonka = get_tonka()
        return {
            "status": "healthy",
            "concepts_loaded": tonka.total_concepts,
            "categories": list(tonka.concepts.keys()) if hasattr(tonka, 'concepts') else []
        }
    except Exception as e:
        return {
            "status": "error",
            "error": str(e)
        }

@router.post("/generate", response_model=TonkaResponse)
async def generate_code(request: TonkaGenerateRequest):
    """Generate code using TONKA"""
    try:
        tonka = get_tonka()
        
        # Generate code
        result = tonka.generate_code(
            task=request.task,
            language=request.language
        )
        
        return TonkaResponse(
            success=result.get("success", True),
            code=result.get("code"),
            source=result.get("source"),
            language=result.get("language"),
            confidence=result.get("confidence", 0.5)
        )
        
    except Exception as e:
        logger.error(f"TONKA generate error: {e}")
        return TonkaResponse(
            success=False,
            error=str(e)
        )

@router.post("/solve")
async def solve_problem(problem: str, problem_id: Optional[str] = None):
    """Solve a programming problem"""
    try:
        tonka = get_tonka()
        
        # For minimal version, just use generate_code
        result = tonka.generate_code(problem)
        
        return {
            "success": True,
            "solution": result.get("code"),
            "source": result.get("source")
        }
        
    except Exception as e:
        logger.error(f"TONKA solve error: {e}")
        return {
            "success": False,
            "error": str(e)
        }

@router.post("/project", response_model=TonkaProjectResponse)
async def create_project(request: TonkaProjectRequest):
    """Create a project structure"""
    try:
        # For minimal version, create basic templates
        files = {}
        
        if request.project_type == "api":
            files["main.py"] = f'''from fastapi import FastAPI

app = FastAPI(title="{request.name}")

@app.get("/")
def read_root():
    return {{"message": "Welcome to {request.name}"}}

@app.get("/health")
def health_check():
    return {{"status": "healthy"}}
'''
            files["requirements.txt"] = "fastapi\nuvicorn\n"
            files["README.md"] = f"# {request.name}\n\nGenerated by TONKA"
            
        elif request.project_type == "cli":
            files[f"{request.name}.py"] = f'''#!/usr/bin/env python3
"""
{request.name} - CLI Application
Generated by TONKA
"""

import sys

def main():
    print("Welcome to {request.name}")
    # TODO: Add your CLI logic here

if __name__ == "__main__":
    main()
'''
            files["requirements.txt"] = "click\n"
            
        else:  # basic
            files["main.py"] = f'''#!/usr/bin/env python3
"""
{request.name}
Generated by TONKA
"""

def main():
    print("Hello from {request.name}")

if __name__ == "__main__":
    main()
'''
            files["requirements.txt"] = ""
            files["README.md"] = f"# {request.name}\n\nA Python project generated by TONKA"
        
        return TonkaProjectResponse(
            success=True,
            files=files,
            file_count=len(files)
        )
        
    except Exception as e:
        logger.error(f"TONKA project error: {e}")
        return TonkaProjectResponse(
            success=False,
            error=str(e)
        )

@router.get("/concepts/stats")
async def get_concept_stats():
    """Get statistics about loaded concepts"""
    try:
        tonka = get_tonka()
        
        stats = {
            "total_concepts": tonka.total_concepts,
            "categories": {}
        }
        
        if hasattr(tonka, 'concepts'):
            for category, concepts in tonka.concepts.items():
                stats["categories"][category] = len(concepts)
        
        return stats
        
    except Exception as e:
        logger.error(f"TONKA stats error: {e}")
        return {
            "error": str(e)
        }

# Integration with Prajna
class PrajnaTonkaRequest(BaseModel):
    """Request that combines Prajna and TONKA"""
    user_query: str
    action: str = "auto"  # auto, generate, explain, solve
    persona: Optional[Dict[str, Any]] = None
    language: str = "python"

@router.post("/prajna/process")
async def process_with_prajna(request: PrajnaTonkaRequest):
    """Process request through both Prajna and TONKA"""
    try:
        # Determine action from query
        query_lower = request.user_query.lower()
        
        # Auto-detect action
        if request.action == "auto":
            if any(word in query_lower for word in ["write", "create", "generate", "code", "function", "class"]):
                action = "generate"
            elif any(word in query_lower for word in ["solve", "problem", "algorithm"]):
                action = "solve"
            elif any(word in query_lower for word in ["explain", "what", "how", "why"]):
                action = "explain"
            else:
                action = "generate"  # Default
        else:
            action = request.action
        
        # Process based on action
        if action == "generate":
            tonka = get_tonka()
            result = tonka.generate_code(request.user_query, request.language)
            
            response = {
                "action": "code_generation",
                "code": result.get("code"),
                "explanation": f"Generated {request.language} code for: {request.user_query}",
                "source": result.get("source"),
                "confidence": result.get("confidence", 0.5)
            }
            
        elif action == "solve":
            tonka = get_tonka()
            result = tonka.generate_code(f"solve {request.user_query}", request.language)
            
            response = {
                "action": "problem_solving",
                "solution": result.get("code"),
                "explanation": f"Solution for: {request.user_query}",
                "source": result.get("source")
            }
            
        else:  # explain
            response = {
                "action": "explanation",
                "explanation": f"TONKA can help you with: {request.user_query}",
                "capabilities": [
                    "Generate code in Python, Rust, C#",
                    "Solve programming problems",
                    "Create project structures",
                    "Implement algorithms"
                ]
            }
        
        return response
        
    except Exception as e:
        logger.error(f"TONKA-Prajna integration error: {e}")
        return {
            "error": str(e),
            "action": "error"
        }
